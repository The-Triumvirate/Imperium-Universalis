


##########
#	POPGROWTH EFFECTS, where most of the code is stored. Hard to understand, but does wonders
##########



PG_add_river_ports = {
	134 = { set_province_flag = PG_river_port }  # Beticus
	135 = { set_province_flag = PG_river_port }  # Beticus
	141 = { set_province_flag = PG_river_port }  # Beticus
	143 = { set_province_flag = PG_river_port }  # Beticus
	171 = { set_province_flag = PG_river_port }  # Beticus
	172 = { set_province_flag = PG_river_port }  # Beticus
	210 = { set_province_flag = PG_river_port }  # Iberus
	215 = { set_province_flag = PG_river_port }  # Iberus
	245 = { set_province_flag = PG_river_port }  # Iberus
	246 = { set_province_flag = PG_river_port }  # Iberus
	248 = { set_province_flag = PG_river_port }  # Iberus
	288 = { set_province_flag = PG_river_port }  # Thames
	291 = { set_province_flag = PG_river_port }  # Thames
	299 = { set_province_flag = PG_river_port }  # Thames
	491 = { set_province_flag = PG_river_port }  # Rhenus
	492 = { set_province_flag = PG_river_port }  # Rhenus
	507 = { set_province_flag = PG_river_port }  # Rhenus
	510 = { set_province_flag = PG_river_port }  # Rhenus
	511 = { set_province_flag = PG_river_port }  # Rhenus
	729 = { set_province_flag = PG_river_port }  # Nile
	731 = { set_province_flag = PG_river_port }  # Nile
	732 = { set_province_flag = PG_river_port }  # Nile
	734 = { set_province_flag = PG_river_port }  # Nile
	735 = { set_province_flag = PG_river_port }  # Nile
	736 = { set_province_flag = PG_river_port }  # Nile
	738 = { set_province_flag = PG_river_port }  # Nile
	739 = { set_province_flag = PG_river_port }  # Nile
	740 = { set_province_flag = PG_river_port }  # Nile
	744 = { set_province_flag = PG_river_port }  # Nile
	745 = { set_province_flag = PG_river_port }  # Nile
	748 = { set_province_flag = PG_river_port }  # Nile
	750 = { set_province_flag = PG_river_port }  # Nile
	751 = { set_province_flag = PG_river_port }  # Nile
	752 = { set_province_flag = PG_river_port }  # Nile
	753 = { set_province_flag = PG_river_port }  # Nile
	754 = { set_province_flag = PG_river_port }  # Nile
	755 = { set_province_flag = PG_river_port }  # Nile
	756 = { set_province_flag = PG_river_port }  # Nile
	757 = { set_province_flag = PG_river_port }  # Nile
	758 = { set_province_flag = PG_river_port }  # Nile
	759 = { set_province_flag = PG_river_port }  # Nile
	760 = { set_province_flag = PG_river_port }  # Nile
	761 = { set_province_flag = PG_river_port }  # Nile
	762 = { set_province_flag = PG_river_port }  # Nile
	763 = { set_province_flag = PG_river_port }  # Nile
	780 = { set_province_flag = PG_river_port }  # Nile
	781 = { set_province_flag = PG_river_port }  # Nile
	782 = { set_province_flag = PG_river_port }  # Nile
	783 = { set_province_flag = PG_river_port }  # Nile
	785 = { set_province_flag = PG_river_port }  # Nile
	795 = { set_province_flag = PG_river_port }  # Nile
	1121 = { set_province_flag = PG_river_port }  # Ister - Danubius
	1126 = { set_province_flag = PG_river_port }  # Ister - Danubius
	1182 = { set_province_flag = PG_river_port }  # Ister - Danubius
	1183 = { set_province_flag = PG_river_port }  # Ister - Danubius
	1188 = { set_province_flag = PG_river_port }  # Ister - Danubius
	1189 = { set_province_flag = PG_river_port }  # Ister - Danubius
	1233 = { set_province_flag = PG_river_port }  # Ister - Danubius
	1239 = { set_province_flag = PG_river_port }  # Ister - Danubius
	1240 = { set_province_flag = PG_river_port }  # Ister - Danubius
	1242 = { set_province_flag = PG_river_port }  # Ister - Danubius
	1247 = { set_province_flag = PG_river_port }  # Ister - Danubius
	1248 = { set_province_flag = PG_river_port }  # Ister - Danubius
	1746 = { set_province_flag = PG_river_port }  # Rhenus
	1749 = { set_province_flag = PG_river_port }  # Rhenus
	1751 = { set_province_flag = PG_river_port }  # Rhenus
	1752 = { set_province_flag = PG_river_port }  # Rhenus
	1763 = { set_province_flag = PG_river_port }  # Rhenus
	1769 = { set_province_flag = PG_river_port }  # Rhenus
	1785 = { set_province_flag = PG_river_port }  # Elba - Albis
	1786 = { set_province_flag = PG_river_port }  # Elba - Albis
	1789 = { set_province_flag = PG_river_port }  # Elba - Albis
	1790 = { set_province_flag = PG_river_port }  # Elba - Albis
	1809 = { set_province_flag = PG_river_port }  # Elba - Albis
	1811 = { set_province_flag = PG_river_port }  # Elba - Albis
	1829 = { set_province_flag = PG_river_port }  # Elba - Albis
	1830 = { set_province_flag = PG_river_port }  # Elba - Albis
	1902 = { set_province_flag = PG_river_port }  # Ister - Danubius
	1904 = { set_province_flag = PG_river_port }  # Ister - Danubius
	1913 = { set_province_flag = PG_river_port }  # Ister - Danubius
	1914 = { set_province_flag = PG_river_port }  # Ister - Danubius
	1915 = { set_province_flag = PG_river_port }  # Ister - Danubius
	1916 = { set_province_flag = PG_river_port }  # Ister - Danubius
	1922 = { set_province_flag = PG_river_port }  # Ister - Danubius
	1925 = { set_province_flag = PG_river_port }  # Ister - Danubius
	1931 = { set_province_flag = PG_river_port }  # Ister - Danubius
	1933 = { set_province_flag = PG_river_port }  # Ister - Danubius
	1935 = { set_province_flag = PG_river_port }  # Ister - Danubius
	2507 = { set_province_flag = PG_river_port }  # Mesopotamia
	2508 = { set_province_flag = PG_river_port }  # Mesopotamia
	2509 = { set_province_flag = PG_river_port }  # Mesopotamia
	2515 = { set_province_flag = PG_river_port }  # Mesopotamia
	2516 = { set_province_flag = PG_river_port }  # Mesopotamia
	2517 = { set_province_flag = PG_river_port }  # Mesopotamia
	2518 = { set_province_flag = PG_river_port }  # Mesopotamia
	2667 = { set_province_flag = PG_river_port }  # Mesopotamia
	2669 = { set_province_flag = PG_river_port }  # Mesopotamia
	2795 = { set_province_flag = PG_river_port }  # Indus
	2801 = { set_province_flag = PG_river_port }  # Indus
	2802 = { set_province_flag = PG_river_port }  # Indus
	2811 = { set_province_flag = PG_river_port }  # Indus
	2919 = { set_province_flag = PG_river_port }  # Narmada
	2922 = { set_province_flag = PG_river_port }  # Indus
	2924 = { set_province_flag = PG_river_port }  # Indus
	2928 = { set_province_flag = PG_river_port }  # Indus
	2929 = { set_province_flag = PG_river_port }  # Indus
	2992 = { set_province_flag = PG_river_port }  # Ganges
	2997 = { set_province_flag = PG_river_port }  # Ganges
	2998 = { set_province_flag = PG_river_port }  # Ganges
	3000 = { set_province_flag = PG_river_port }  # Ganges
	3001 = { set_province_flag = PG_river_port }  # Ganges
	3003 = { set_province_flag = PG_river_port }  # Ganges
	3004 = { set_province_flag = PG_river_port }  # Ganges
	3009 = { set_province_flag = PG_river_port }  # Ganges
	3011 = { set_province_flag = PG_river_port }  # Ganges
	3018 = { set_province_flag = PG_river_port }  # Ganges
	3019 = { set_province_flag = PG_river_port }  # Ganges
	3020 = { set_province_flag = PG_river_port }  # Ganges
	3023 = { set_province_flag = PG_river_port }  # Ganges
	3024 = { set_province_flag = PG_river_port }  # Ganges
	3025 = { set_province_flag = PG_river_port }  # Ganges
	3026 = { set_province_flag = PG_river_port }  # Ganges
	3027 = { set_province_flag = PG_river_port }  # Ganges
	3035 = { set_province_flag = PG_river_port }  # Mahamadi
	3065 = { set_province_flag = PG_river_port }  # Mahamadi
	3102 = { set_province_flag = PG_river_port }  # Narmada
	3237 = { set_province_flag = PG_river_port }  # Nile
	3282 = { set_province_flag = PG_river_port }  # Niger
	3283 = { set_province_flag = PG_river_port }  # Niger
	3459 = { set_province_flag = PG_river_port }  # Mesopotamia
	3464 = { set_province_flag = PG_river_port }  # Mesopotamia
	3468 = { set_province_flag = PG_river_port }  # Mesopotamia
	3486 = { set_province_flag = PG_river_port }  # Indus
	3489 = { set_province_flag = PG_river_port }  # Indus
	3499 = { set_province_flag = PG_river_port }  # Ganges
	3500 = { set_province_flag = PG_river_port }  # Ganges
	3510 = { set_province_flag = PG_river_port }  # Indus
	3512 = { set_province_flag = PG_river_port }  # Indus
	3513 = { set_province_flag = PG_river_port }  # Indus
	3514 = { set_province_flag = PG_river_port }  # Indus
	3516 = { set_province_flag = PG_river_port }  # Indus
	3517 = { set_province_flag = PG_river_port }  # Indus
	3518 = { set_province_flag = PG_river_port }  # Indus
	3519 = { set_province_flag = PG_river_port }  # Indus
	3520 = { set_province_flag = PG_river_port }  # Ganges
	3522 = { set_province_flag = PG_river_port }  # Ganges
	3538 = { set_province_flag = PG_river_port }  # Ganges
	3541 = { set_province_flag = PG_river_port }  # Ganges
	3542 = { set_province_flag = PG_river_port }  # Ganges
	3544 = { set_province_flag = PG_river_port }  # Ganges
	3577 = { set_province_flag = PG_river_port }  # Narmada
	3588 = { set_province_flag = PG_river_port }  # Narmada
	3589 = { set_province_flag = PG_river_port }  # Narmada
	3593 = { set_province_flag = PG_river_port }  # Narmada
	3612 = { set_province_flag = PG_river_port }  # Ganges
	3648 = { set_province_flag = PG_river_port }  # Ganges
	3652 = { set_province_flag = PG_river_port }  # Mahamadi
	3653 = { set_province_flag = PG_river_port }  # Mahamadi
	3701 = { set_province_flag = PG_river_port }  # Indus
	3702 = { set_province_flag = PG_river_port }  # Indus
	3721 = { set_province_flag = PG_river_port }  # Ganges
	3722 = { set_province_flag = PG_river_port }  # Ganges
	3727 = { set_province_flag = PG_river_port }  # Ganges
	3731 = { set_province_flag = PG_river_port }  # Ganges
	3773 = { set_province_flag = PG_river_port }  # Ganges
	3775 = { set_province_flag = PG_river_port }  # Ganges
	3789 = { set_province_flag = PG_river_port }  # Mahamadi
	3816 = { set_province_flag = PG_river_port }  # Ganges
	3901 = { set_province_flag = PG_river_port }  # Ganges
	3902 = { set_province_flag = PG_river_port }  # Ganges
	3905 = { set_province_flag = PG_river_port }  # Ganges
	3920 = { set_province_flag = PG_river_port }  # Narmada
	3986 = { set_province_flag = PG_river_port }  # Mesopotamia
	4034 = { set_province_flag = PG_river_port }  # Yellow river
	4035 = { set_province_flag = PG_river_port }  # Yellow river
	4037 = { set_province_flag = PG_river_port }  # Yellow river
	4094 = { set_province_flag = PG_river_port }  # Yellow river
	4102 = { set_province_flag = PG_river_port }  # Yellow river
	4105 = { set_province_flag = PG_river_port }  # Yellow river
	4106 = { set_province_flag = PG_river_port }  # Yellow river
	4109 = { set_province_flag = PG_river_port }  # Yellow river
	4110 = { set_province_flag = PG_river_port }  # Yellow river
	4113 = { set_province_flag = PG_river_port }  # Yellow river
	4115 = { set_province_flag = PG_river_port }  # Yellow river
	4117 = { set_province_flag = PG_river_port }  # Yellow river
	4118 = { set_province_flag = PG_river_port }  # Yellow river
	4119 = { set_province_flag = PG_river_port }  # Yellow river
	4121 = { set_province_flag = PG_river_port }  # Yellow river
	4122 = { set_province_flag = PG_river_port }  # Yellow river
	4123 = { set_province_flag = PG_river_port }  # Yellow river
	4127 = { set_province_flag = PG_river_port }  # Yellow river
	4128 = { set_province_flag = PG_river_port }  # Yellow river
	4131 = { set_province_flag = PG_river_port }  # Yellow river
	4132 = { set_province_flag = PG_river_port }  # Yellow river
	4253 = { set_province_flag = PG_river_port }  # Yellow river
	4253 = { set_province_flag = PG_river_port }  # Yellow river
	4255 = { set_province_flag = PG_river_port }  # Yellow river
	4256 = { set_province_flag = PG_river_port }  # Yellow river
	4260 = { set_province_flag = PG_river_port }  # Yellow river
	4261 = { set_province_flag = PG_river_port }  # Yellow river
	4264 = { set_province_flag = PG_river_port }  # Yellow river
	4266 = { set_province_flag = PG_river_port }  # Yellow river
	4267 = { set_province_flag = PG_river_port }  # Yellow river
	4268 = { set_province_flag = PG_river_port }  # Yellow river
	4269 = { set_province_flag = PG_river_port }  # Yellow river
	4271 = { set_province_flag = PG_river_port }  # Yellow river
	4300 = { set_province_flag = PG_river_port }  # Yellow river
	4309 = { set_province_flag = PG_river_port }  # Yellow river
	4311 = { set_province_flag = PG_river_port }  # Yellow river
	4318 = { set_province_flag = PG_river_port }  # Yellow river
	4345 = { set_province_flag = PG_river_port }  # Yellow river
	4350 = { set_province_flag = PG_river_port }  # Yellow river
	4351 = { set_province_flag = PG_river_port }  # Yellow river
	4352 = { set_province_flag = PG_river_port }  # Yellow river
	4353 = { set_province_flag = PG_river_port }  # Yellow river
	4356 = { set_province_flag = PG_river_port }  # Yellow river
	4357 = { set_province_flag = PG_river_port }  # Yellow river
	4358 = { set_province_flag = PG_river_port }  # Yellow river
	4359 = { set_province_flag = PG_river_port }  # Yellow river
	4360 = { set_province_flag = PG_river_port }  # Yellow river
	4361 = { set_province_flag = PG_river_port }  # Yellow river
	4362 = { set_province_flag = PG_river_port }  # Yellow river
	4378 = { set_province_flag = PG_river_port }  # Yellow river
	4404 = { set_province_flag = PG_river_port }  # Jiu River
	4405 = { set_province_flag = PG_river_port }  # Jiu River
	4412 = { set_province_flag = PG_river_port }  # Jiu River
	4415 = { set_province_flag = PG_river_port }  # Jiu River
	4424 = { set_province_flag = PG_river_port }  # Jiu River
	4425 = { set_province_flag = PG_river_port }  # Jiu River
	4426 = { set_province_flag = PG_river_port }  # Jiu River
	4444 = { set_province_flag = PG_river_port }  # Jiu River
	4445 = { set_province_flag = PG_river_port }  # Jiu River
	4446 = { set_province_flag = PG_river_port }  # Jiu River
	4461 = { set_province_flag = PG_river_port }  # Jiu River
	4462 = { set_province_flag = PG_river_port }  # Jiu River
	4463 = { set_province_flag = PG_river_port }  # Jiu River
	4464 = { set_province_flag = PG_river_port }  # Jiu River
	4471 = { set_province_flag = PG_river_port }  # Jiu River
	4472 = { set_province_flag = PG_river_port }  # Jiu River
	4473 = { set_province_flag = PG_river_port }  # Jiu River
	4474 = { set_province_flag = PG_river_port }  # Jiu River
	4476 = { set_province_flag = PG_river_port }  # Jiu River
	4477 = { set_province_flag = PG_river_port }  # Jiu River
	4479 = { set_province_flag = PG_river_port }  # Jiu River
	4480 = { set_province_flag = PG_river_port }  # Jiu River
	4482 = { set_province_flag = PG_river_port }  # Jiu River
	4483 = { set_province_flag = PG_river_port }  # Jiu River
	4484 = { set_province_flag = PG_river_port }  # Jiu River
	4490 = { set_province_flag = PG_river_port }  # Jiu River
	4496 = { set_province_flag = PG_river_port }  # Jiu River
	4498 = { set_province_flag = PG_river_port }  # Jiu River
	4509 = { set_province_flag = PG_river_port }  # Jiu River
	4608 = { set_province_flag = PG_river_port }  # Yellow river
	4846 = { set_province_flag = PG_river_port }  # Mesopotamia
	4871 = { set_province_flag = PG_river_port }  # Mesopotamia
	4942 = { set_province_flag = PG_river_port }  # Mesopotamia
	5116 = { set_province_flag = PG_river_port }  # Ganges
	5117 = { set_province_flag = PG_river_port }  # Ganges
	5359 = { set_province_flag = PG_river_port }  # Ganges
	5476 = { set_province_flag = PG_river_port }  # Mahamadi
	5477 = { set_province_flag = PG_river_port }  # Mahamadi
	5480 = { set_province_flag = PG_river_port }  # Mahamadi
	5630 = { set_province_flag = PG_river_port }  # Mesopotamia
	5633 = { set_province_flag = PG_river_port }  # Mesopotamia
	5850 = { set_province_flag = PG_river_port }  # Ister - Danubius
	5851 = { set_province_flag = PG_river_port }  # Ister - Danubius
	6243 = { set_province_flag = PG_river_port }  # Nile
	6244 = { set_province_flag = PG_river_port }  # Nile
	6245 = { set_province_flag = PG_river_port }  # Nile
	6249 = { set_province_flag = PG_river_port }  # Nile
	6251 = { set_province_flag = PG_river_port }  # Nile
	6253 = { set_province_flag = PG_river_port }  # Nile
	6254 = { set_province_flag = PG_river_port }  # Nile
	6255 = { set_province_flag = PG_river_port }  # Nile
	6256 = { set_province_flag = PG_river_port }  # Nile
	6257 = { set_province_flag = PG_river_port }  # Nile
	6258 = { set_province_flag = PG_river_port }  # Nile
	6259 = { set_province_flag = PG_river_port }  # Nile
	6260 = { set_province_flag = PG_river_port }  # Nile
	6261 = { set_province_flag = PG_river_port }  # Nile
	6262 = { set_province_flag = PG_river_port }  # Nile
	6263 = { set_province_flag = PG_river_port }  # Nile
	6282 = { set_province_flag = PG_river_port }  # Mesopotamia
	6508 = { set_province_flag = PG_river_port }  # Beticus
	6515 = { set_province_flag = PG_river_port }  # Ganges
	6528 = { set_province_flag = PG_river_port }  # Ganges
	6529 = { set_province_flag = PG_river_port }  # Ganges
	6756 = { set_province_flag = PG_river_port }  # Airavati
	6757 = { set_province_flag = PG_river_port }  # Airavati
	6759 = { set_province_flag = PG_river_port }  # Airavati
	6761 = { set_province_flag = PG_river_port }  # Airavati
	6762 = { set_province_flag = PG_river_port }  # Airavati
	6763 = { set_province_flag = PG_river_port }  # Airavati
	6782 = { set_province_flag = PG_river_port }  # Airavati
	6783 = { set_province_flag = PG_river_port }  # Airavati
	6784 = { set_province_flag = PG_river_port }  # Airavati
	6785 = { set_province_flag = PG_river_port }  # Airavati
	6797 = { set_province_flag = PG_river_port }  # Airavati
	6798 = { set_province_flag = PG_river_port }  # Airavati
	6801 = { set_province_flag = PG_river_port }  # Airavati
	6802 = { set_province_flag = PG_river_port }  # Airavati
	6803 = { set_province_flag = PG_river_port }  # Airavati
	6804 = { set_province_flag = PG_river_port }  # Airavati
	6805 = { set_province_flag = PG_river_port }  # Airavati
	6809 = { set_province_flag = PG_river_port }  # Airavati
	6812 = { set_province_flag = PG_river_port }  # Airavati
	6813 = { set_province_flag = PG_river_port }  # Airavati
	6814 = { set_province_flag = PG_river_port }  # Airavati
	6817 = { set_province_flag = PG_river_port }  # Airavati
	6820 = { set_province_flag = PG_river_port }  # Airavati
	6821 = { set_province_flag = PG_river_port }  # Airavati
	6822 = { set_province_flag = PG_river_port }  # Airavati
	7575 = { set_province_flag = PG_river_port }  # Manam Kom
	7578 = { set_province_flag = PG_river_port }  # Manam Kom
	7580 = { set_province_flag = PG_river_port }  # Manam Kom
	7581 = { set_province_flag = PG_river_port }  # Manam Kom
	7582 = { set_province_flag = PG_river_port }  # Manam Kom
	7583 = { set_province_flag = PG_river_port }  # Manam Kom
	7584 = { set_province_flag = PG_river_port }  # Manam Kom
	7587 = { set_province_flag = PG_river_port }  # Manam Kom
	7596 = { set_province_flag = PG_river_port }  # Manam Kom
	7598 = { set_province_flag = PG_river_port }  # Manam Kom
	7601 = { set_province_flag = PG_river_port }  # Manam Kom
	7602 = { set_province_flag = PG_river_port }  # Manam Kom
	7603 = { set_province_flag = PG_river_port }  # Manam Kom
	7604 = { set_province_flag = PG_river_port }  # Manam Kom
	7611 = { set_province_flag = PG_river_port }  # Manam Kom
	7612 = { set_province_flag = PG_river_port }  # Manam Kom
	7674 = { set_province_flag = PG_river_port }  # Manam Kom
	7823 = { set_province_flag = PG_river_port }  # Manam Kom
	7824 = { set_province_flag = PG_river_port }  # Manam Kom
	7826 = { set_province_flag = PG_river_port }  # Manam Kom
	8054 = { set_province_flag = PG_river_port }  # Niger
	8056 = { set_province_flag = PG_river_port }  # Niger
	8057 = { set_province_flag = PG_river_port }  # Niger
	8058 = { set_province_flag = PG_river_port }  # Niger
	8059 = { set_province_flag = PG_river_port }  # Niger
	8060 = { set_province_flag = PG_river_port }  # Niger
	8061 = { set_province_flag = PG_river_port }  # Niger
	8062 = { set_province_flag = PG_river_port }  # Niger
	8069 = { set_province_flag = PG_river_port }  # Niger
	8070 = { set_province_flag = PG_river_port }  # Niger
	8071 = { set_province_flag = PG_river_port }  # Niger
	8072 = { set_province_flag = PG_river_port }  # Niger
	8073 = { set_province_flag = PG_river_port }  # Niger
	8074 = { set_province_flag = PG_river_port }  # Niger
	8075 = { set_province_flag = PG_river_port }  # Niger
	8076 = { set_province_flag = PG_river_port }  # Niger
	8077 = { set_province_flag = PG_river_port }  # Niger
	8078 = { set_province_flag = PG_river_port }  # Niger
	8079 = { set_province_flag = PG_river_port }  # Niger
	8080 = { set_province_flag = PG_river_port }  # Niger
	8081 = { set_province_flag = PG_river_port }  # Niger
	8083 = { set_province_flag = PG_river_port }  # Niger
	8084 = { set_province_flag = PG_river_port }  # Niger
	8085 = { set_province_flag = PG_river_port }  # Niger
	8086 = { set_province_flag = PG_river_port }  # Niger
	8087 = { set_province_flag = PG_river_port }  # Niger
	8101 = { set_province_flag = PG_river_port }  # Ister - Danubius

}

PG_winter_rurcap = {
	if = {
		limit = { OR = {
			blast_furnace_institution = 100
			advanced_hydraulics_institution = 100
			owner = { has_reform = steppe_horde_reform }	# Nomads act like if they had the most tech; but can't get pop from buildings
		} }
		multiply_variable = { rural_capacity = $tier3$ }
	}

	else_if = {
		limit = { OR = {
			siege_engineering_institution = 100
			cast_iron_institution = 100
			owner = { government = tribal }				# Tribals (other than nomads) are like having "some" technology, but 1/2 build effs.
		} }
		multiply_variable = { rural_capacity = $tier2$ }
	}


	else = { multiply_variable = { rural_capacity = $tier1$ } }


}


PG_terrain_rurcap = {
	if = { 		limit = { has_building = hospital } 	multiply_variable = { rural_capacity = $tier4$ } }
	else_if = { limit = { has_building = medicus } 		multiply_variable = { rural_capacity = $tier3$ } }
	else_if = { limit = { has_building = herbalist } 	multiply_variable = { rural_capacity = $tier2$ } }
	else = { 											multiply_variable = { rural_capacity = $tier1$ } }
}

PS_terr_max = {
	set_variable = { which = PS_terrmax which = PS_rur2 } multiply_variable = { PS_terrmax = $max$ }

}
PG_growth_modify_all = {
	multiply_variable = { PG_trb_grow = $trb$ }
	multiply_variable = { PG_com_grow = $com$ }
	multiply_variable = { PG_upp_grow = $upp$ }
}

PG_urban_buildings = {

	trigger_switch = {
		on_trigger = has_building
		small_harbor = { 	change_variable = { urban_capacity = 0.1 } }
		big_harbor = { 		change_variable = { urban_capacity = 0.3 } }
		harbor_district = { change_variable = { urban_capacity = 0.5 } }
	}
	trigger_switch = {
		on_trigger = has_building
		small_shipyard = { change_variable = { urban_capacity = 0.3 } }
		big_shipyard = { change_variable = { urban_capacity = 0.5 } }
		military_wharf = { change_variable = { urban_capacity = 0.7 } }
	}
	trigger_switch = {
		on_trigger = has_building
		aqueduct = { 	change_variable = { urban_capacity = 0.2 } }
	}
	trigger_switch = {
		on_trigger = has_building
		small_market = { 	change_variable = { urban_capacity = 0.1 } }
		medium_market = { 	change_variable = { urban_capacity = 0.3 } }
		great_market = { 	change_variable = { urban_capacity = 0.5 } }
	}
	trigger_switch = {
		on_trigger = has_building
		small_army_camp = { 			change_variable = { urban_capacity = 0.2 } }
		small_military_settlement = { 	change_variable = { urban_capacity = 0.5 } }
		big_military_settlement = { 	change_variable = { urban_capacity = 1.2 } }
	}
	trigger_switch = {
		on_trigger = has_building
		gravel_road = { 	change_variable = { urban_capacity = 0.1 } }
		paved_road = { 		change_variable = { urban_capacity = 0.3 } }
		imperial_road = { 	change_variable = { urban_capacity = 0.5 } }
	}
	trigger_switch = {
		on_trigger = has_building
		shrine = { 			change_variable = { urban_capacity = 0.2 } }
		small_temple = { 	change_variable = { urban_capacity = 0.5 } }
		great_temple = { 	change_variable = { urban_capacity = 1.2 } }
	}
	trigger_switch = {
		on_trigger = has_building
		big_theater = { 	change_variable = { urban_capacity = 0.3 } }
		great_theater = { 	change_variable = { urban_capacity = 0.6 } }
		huge_theater = { 	change_variable = { urban_capacity = 1.5 } }
	}
	trigger_switch = {
		on_trigger = has_building
		taxman = { 			change_variable = { urban_capacity = 0.2 } }
		tax_collector = { 	change_variable = { urban_capacity = 0.5 } }
	}
	trigger_switch = {
		on_trigger = has_building
		big_townhall = { 		change_variable = { urban_capacity = 0.2 } }
		government_palace = { 	change_variable = { urban_capacity = 0.4 } }
		government_district = { change_variable = { urban_capacity = 0.6 } }
	}
	trigger_switch = {						# Soldiers live somewhere, don't you think?
		on_trigger = has_building
		wood_city_walls = { change_variable = { urban_capacity = 0.4 } }
		stone_city_walls = { change_variable = { urban_capacity = 1.0 } }
		turreted_city_walls = { change_variable = { urban_capacity = 1.8 } }
		border_garrison = { change_variable = { urban_capacity = 0.2 } }
	}

	trigger_switch = {
		on_trigger = has_building
		great_library = { 		change_variable = { urban_capacity = 1.5 } }
		library = { 			change_variable = { urban_capacity = 0.3 } }
	}
	trigger_switch = {
		on_trigger = has_building
		mathematician_academy = { change_variable = { urban_capacity = 0.5 } }
	}
	trigger_switch = {
		on_trigger = has_building
		philosophers_academy = { change_variable = { urban_capacity = 0.5 } }
	}
	trigger_switch = {
		on_trigger = has_building
		military_academy = { 	change_variable = { urban_capacity = 0.5 } }
	}
	trigger_switch = {
		on_trigger = has_building
		imperial_palace = { 	change_variable = { urban_capacity = 1.0 } }
		palace_garden = { 		change_variable = { urban_capacity = 0.5 } }
	}

}

PG_urban_buildings_details = {
	trigger_switch = {
		on_trigger = has_building
		small_harbor = { 	change_variable = { urban_capacity = 0.1 } set_variable = { which = PS_urb_bld1 value = 0.1 } }
		big_harbor = { 		change_variable = { urban_capacity = 0.3 } set_variable = { which = PS_urb_bld1 value = 0.3 } }
		harbor_district = { change_variable = { urban_capacity = 0.5 } set_variable = { which = PS_urb_bld1 value = 0.5 } }
	}
	trigger_switch = {
		on_trigger = has_building
		aqueduct = { change_variable = { urban_capacity = 0.2 } set_variable = { which = PS_urb_bld2 value = 0.2 } }
	}
	trigger_switch = {
		on_trigger = has_building
		small_shipyard = { change_variable = { urban_capacity = 0.3 } set_variable = { which = PS_urb_bld2 value = 0.3 } }
		big_shipyard = { change_variable = { urban_capacity = 0.5 } set_variable = { which = PS_urb_bld2 value = 0.5 } }
		military_wharf = { change_variable = { urban_capacity = 0.7 } set_variable = { which = PS_urb_bld2 value = 0.7 } }
	}
	trigger_switch = {
		on_trigger = has_building
		small_market = { 	change_variable = { urban_capacity = 0.1 } set_variable = { which = PS_urb_bld3 value = 0.1 } }
		medium_market = { 	change_variable = { urban_capacity = 0.3 } set_variable = { which = PS_urb_bld3 value = 0.3 } }
		great_market = { 	change_variable = { urban_capacity = 0.5 } set_variable = { which = PS_urb_bld3 value = 0.5 } }
	}
	trigger_switch = {
		on_trigger = has_building
		small_army_camp = { 			change_variable = { urban_capacity = 0.2 } set_variable = { which = PS_urb_bld4 value = 0.2 } }
		small_military_settlement = { 	change_variable = { urban_capacity = 0.5 } set_variable = { which = PS_urb_bld4 value = 0.5 } }
		big_military_settlement = { 	change_variable = { urban_capacity = 1.2 } set_variable = { which = PS_urb_bld4 value = 1.2 } }
	}
	trigger_switch = {
		on_trigger = has_building
		gravel_road = { 	change_variable = { urban_capacity = 0.1 } set_variable = { which = PS_urb_bld5 value = 0.1 } }
		paved_road = { 		change_variable = { urban_capacity = 0.3 } set_variable = { which = PS_urb_bld5 value = 0.3 } }
		imperial_road = { 	change_variable = { urban_capacity = 0.5 } set_variable = { which = PS_urb_bld5 value = 0.5 } }
	}
	trigger_switch = {
		on_trigger = has_building
		shrine = { 			change_variable = { urban_capacity = 0.2 } set_variable = { which = PS_urb_bld6 value = 0.2 } }
		small_temple = { 	change_variable = { urban_capacity = 0.5 } set_variable = { which = PS_urb_bld6 value = 0.5 } }
		great_temple = { 	change_variable = { urban_capacity = 1.2 } set_variable = { which = PS_urb_bld6 value = 1.2 } }
	}
	trigger_switch = {
		on_trigger = has_building
		big_theater = { 	change_variable = { urban_capacity = 0.3 } set_variable = { which = PS_urb_bld7 value = 0.3 } }
		great_theater = { 	change_variable = { urban_capacity = 0.6 } set_variable = { which = PS_urb_bld7 value = 0.6 } }
		huge_theater = { 	change_variable = { urban_capacity = 1.5 } set_variable = { which = PS_urb_bld7 value = 1.5 } }
	}
	trigger_switch = {
		on_trigger = has_building
		taxman = { 			change_variable = { urban_capacity = 0.2 } set_variable = { which = PS_urb_bld8 value = 0.2 } }
		tax_collector = { 	change_variable = { urban_capacity = 0.5 } set_variable = { which = PS_urb_bld8 value = 0.5 } }
	}
	trigger_switch = {
		on_trigger = has_building
		big_townhall = { 		change_variable = { urban_capacity = 0.2 } set_variable = { which = PS_urb_bld9 value = 0.2 } }
		government_palace = { 	change_variable = { urban_capacity = 0.4 } set_variable = { which = PS_urb_bld9 value = 0.4 } }
		government_district = { change_variable = { urban_capacity = 0.6 } set_variable = { which = PS_urb_bld9 value = 0.6 } }
	}
	trigger_switch = {
		on_trigger = has_building
		wood_city_walls = { change_variable = { urban_capacity = 0.4 } set_variable = { which = PS_urb_bld10 value = 0.4 } }
		stone_city_walls = { change_variable = { urban_capacity = 1.0 } set_variable = { which = PS_urb_bld10 value = 1.0 } }
		turreted_city_walls = { change_variable = { urban_capacity = 1.8 } set_variable = { which = PS_urb_bld10 value = 1.8 } }
		border_garrison = { change_variable = { urban_capacity = 0.2 } set_variable = { which = PS_urb_bld10 value = 0.2 } }
	}

	trigger_switch = {
		on_trigger = has_building
		great_library = { 		change_variable = { urban_capacity = 1.5 } set_variable = { which = PS_urb_bld11 value = 1.5 } }
		library = { 			change_variable = { urban_capacity = 0.3 } set_variable = { which = PS_urb_bld11 value = 0.3 } }
	}
	set_variable = { which = PS_urb_bld12 value = 0.0 }
	trigger_switch = {
		on_trigger = has_building
		mathematician_academy = { change_variable = { urban_capacity = 0.5 } change_variable = { which = PS_urb_bld12 value = 0.5 } }
	}
	trigger_switch = {
		on_trigger = has_building
		philosophers_academy = { change_variable = { urban_capacity = 0.5 } change_variable = { which = PS_urb_bld12 value = 0.5 } }
	}
	trigger_switch = {
		on_trigger = has_building
		military_academy = { 	change_variable = { urban_capacity = 0.5 } change_variable = { which = PS_urb_bld12 value = 0.5 } }
	}
	trigger_switch = {
		on_trigger = has_building
		imperial_palace = { 	change_variable = { urban_capacity = 1.0 } set_variable = { which = PS_urb_bld13 value = 1.0 } }
		palace_garden = { 		change_variable = { urban_capacity = 0.5 } set_variable = { which = PS_urb_bld13 value = 0.5 } }
	}


}

PG_ruralupper_buildings = {
	trigger_switch = {
		on_trigger = has_building
		big_townhall = { 		change_variable = { PG_ruralupper = 0.2 } }
		government_palace = { 	change_variable = { PG_ruralupper = 0.4 } }
		government_district = { change_variable = { PG_ruralupper = 1.0 } }
	}
	trigger_switch = {
		on_trigger = has_building
		shrine = { 			change_variable = { PG_ruralupper = 0.2 } }
		small_temple = { 	change_variable = { PG_ruralupper = 0.5 } }
		great_temple = { 	change_variable = { PG_ruralupper = 1.0 } }
	}

}
PG_ruralupper_buildings_detail = {
	trigger_switch = {
		on_trigger = has_building
		big_townhall = { 		change_variable = { PG_ruralupper = 0.2 } set_variable = { which = PS_rur_upp1 value = 0.2 } }
		government_palace = { 	change_variable = { PG_ruralupper = 0.4 } set_variable = { which = PS_rur_upp1 value = 0.4 } }
		government_district = { change_variable = { PG_ruralupper = 1.0 } set_variable = { which = PS_rur_upp1 value = 1.0 } }
	}
	trigger_switch = {
		on_trigger = has_building
		shrine = { 			change_variable = { PG_ruralupper = 0.2 } set_variable = { which = PS_rur_upp2 value = 0.2 } }
		small_temple = { 	change_variable = { PG_ruralupper = 0.5 } set_variable = { which = PS_rur_upp2 value = 0.5 } }
		great_temple = { 	change_variable = { PG_ruralupper = 1.0 } set_variable = { which = PS_rur_upp2 value = 1.0 } }
	}

}
PG_urbanupper_buildings = {
	trigger_switch = {
		on_trigger = has_building
		big_townhall = { 		change_variable = { PG_urbanupper = 0.2 } }
		government_palace = { 	change_variable = { PG_urbanupper = 0.4 } }
		government_district = { change_variable = { PG_urbanupper = 1.0 } }
	}
	trigger_switch = {
		on_trigger = has_building
		shrine = { 				change_variable = { PG_urbanupper = 0.2 } }
		small_temple = { 		change_variable = { PG_urbanupper = 0.5 } }
		great_temple = { 		change_variable = { PG_urbanupper = 1.0 } }
	}
	trigger_switch = {
		on_trigger = has_building
		great_library = { 		change_variable = { PG_urbanupper = 1.0 } }
		library = { 			change_variable = { PG_urbanupper = 0.2 } }

	}
	trigger_switch = {
		on_trigger = has_building
		mathematician_academy = { 	change_variable = { PG_urbanupper = 0.5 } }
	}
	trigger_switch = {
		on_trigger = has_building
		philosophers_academy = { 	change_variable = { PG_urbanupper = 0.5 } }
	}
	trigger_switch = {
		on_trigger = has_building
		military_academy = { 		change_variable = { PG_urbanupper = 0.5 } }
	}
	trigger_switch = {
		on_trigger = has_building
		imperial_palace = { 	change_variable = { PG_urbanupper = 1.0 } }
		palace_garden = { 		change_variable = { PG_urbanupper = 0.5 } }

	}

}
PG_urbanupper_buildings_detail = {
	trigger_switch = {
		on_trigger = has_building
		big_townhall = { 		change_variable = { PG_urbanupper = 0.2 } set_variable = { which = PS_urb_upp1 value = 0.2 } }
		government_palace = { 	change_variable = { PG_urbanupper = 0.4 } set_variable = { which = PS_urb_upp1 value = 0.4 } }
		government_district = { change_variable = { PG_urbanupper = 1.0 } set_variable = { which = PS_urb_upp1 value = 1.0 } }
	}
	trigger_switch = {
		on_trigger = has_building
		shrine = { 				change_variable = { PG_urbanupper = 0.2 } set_variable = { which = PS_urb_upp2 value = 0.2 } }
		small_temple = { 		change_variable = { PG_urbanupper = 0.5 } set_variable = { which = PS_urb_upp2 value = 0.5 } }
		great_temple = { 		change_variable = { PG_urbanupper = 1.0 } set_variable = { which = PS_urb_upp2 value = 1.0 } }
	}
	trigger_switch = {
		on_trigger = has_building
		great_library = { 		change_variable = { PG_urbanupper = 1.0 } set_variable = { which = PS_urb_upp3 value = 1.0 } }
		library = { 			change_variable = { PG_urbanupper = 0.2 } set_variable = { which = PS_urb_upp3 value = 0.2 } }

	}
	set_variable = { which = PS_urb_upp4 value = 0.0 }
	trigger_switch = {
		on_trigger = has_building
		mathematician_academy = { 	change_variable = { PG_urbanupper = 0.5 } change_variable = { which = PS_urb_upp4 value = 0.5 } }
	}
	trigger_switch = {
		on_trigger = has_building
		philosophers_academy = { 	change_variable = { PG_urbanupper = 0.5 } change_variable = { which = PS_urb_upp4 value = 0.5 } }
	}
	trigger_switch = {
		on_trigger = has_building
		military_academy = { 		change_variable = { PG_urbanupper = 0.5 } change_variable = { which = PS_urb_upp4 value = 0.5 } }
	}
	trigger_switch = {
		on_trigger = has_building
		imperial_palace = { 	change_variable = { PG_urbanupper = 1.0 } set_variable = { which = PS_urb_upp5 value = 1.0 } }
		palace_garden = { 		change_variable = { PG_urbanupper = 0.5 } set_variable = { which = PS_urb_upp5 value = 0.5 } }

	}

}
PG_detail_zerovalues = {

	# Must set zeros if the variables are not found. Otherwise, the modifier will be giving errors in the error.log and bloat the file
	if = { limit = { NOT = { check_variable = { PS_urb_bld1 = 0.001 } } } set_variable = { which = PS_urb_bld1 value = 0 } }
	if = { limit = { NOT = { check_variable = { PS_urb_bld2 = 0.001 } } } set_variable = { which = PS_urb_bld2 value = 0 } }
	if = { limit = { NOT = { check_variable = { PS_urb_bld3 = 0.001 } } } set_variable = { which = PS_urb_bld3 value = 0 } }
	if = { limit = { NOT = { check_variable = { PS_urb_bld4 = 0.001 } } } set_variable = { which = PS_urb_bld4 value = 0 } }
	if = { limit = { NOT = { check_variable = { PS_urb_bld5 = 0.001 } } } set_variable = { which = PS_urb_bld5 value = 0 } }
	if = { limit = { NOT = { check_variable = { PS_urb_bld6 = 0.001 } } } set_variable = { which = PS_urb_bld6 value = 0 } }
	if = { limit = { NOT = { check_variable = { PS_urb_bld7 = 0.001 } } } set_variable = { which = PS_urb_bld7 value = 0 } }
	if = { limit = { NOT = { check_variable = { PS_urb_bld8 = 0.001 } } } set_variable = { which = PS_urb_bld8 value = 0 } }
	if = { limit = { NOT = { check_variable = { PS_urb_bld9 = 0.001 } } } set_variable = { which = PS_urb_bld9 value = 0 } }
	if = { limit = { NOT = { check_variable = { PS_urb_bld10 = 0.001 } } } set_variable = { which = PS_urb_bld10 value = 0 } }
	if = { limit = { NOT = { check_variable = { PS_urb_bld11 = 0.001 } } } set_variable = { which = PS_urb_bld11 value = 0 } }
	if = { limit = { NOT = { check_variable = { PS_urb_bld12 = 0.001 } } } set_variable = { which = PS_urb_bld12 value = 0 } }
	if = { limit = { NOT = { check_variable = { PS_urb_bld13 = 0.001 } } } set_variable = { which = PS_urb_bld13 value = 0 } }

	if = { limit = { NOT = { check_variable = { PG_urb_to_trib = 0.001 } } } set_variable = { which = PG_urb_to_trib value = 0 } }
	if = { limit = { NOT = { check_variable = { PS_rur_upp1 = 0.001 } } } set_variable = { which = PS_rur_upp1 value = 0 } }
	if = { limit = { NOT = { check_variable = { PS_rur_upp2 = 0.001 } } } set_variable = { which = PS_rur_upp2 value = 0 } }
	if = { limit = { NOT = { check_variable = { PS_urb_upp1 = 0.001 } } } set_variable = { which = PS_urb_upp1 value = 0 } }
	if = { limit = { NOT = { check_variable = { PS_urb_upp2 = 0.001 } } } set_variable = { which = PS_urb_upp2 value = 0 } }
	if = { limit = { NOT = { check_variable = { PS_urb_upp3 = 0.001 } } } set_variable = { which = PS_urb_upp3 value = 0 } }
	if = { limit = { NOT = { check_variable = { PS_urb_upp4 = 0.001 } } } set_variable = { which = PS_urb_upp4 value = 0 } }
	if = { limit = { NOT = { check_variable = { PS_urb_upp5 = 0.001 } } } set_variable = { which = PS_urb_upp5 value = 0 } }

	if = { limit = { NOT = { check_variable = { PS_urb_upp1 = 0.001 } } } set_variable = { which = PS_urb_upp1 value = 0 } }




}

PG_urbanupper_capital = {
	# IMPERIAL CAPITAL
	if = { 		limit = { is_capital = yes owner = { total_development = 5000 } } change_variable = { PG_urbanupper = 7 } }
	else_if = { limit = { is_capital = yes owner = { total_development = 3500 } } change_variable = { PG_urbanupper = 6 } }
	else_if = { limit = { is_capital = yes owner = { total_development = 2500 } } change_variable = { PG_urbanupper = 5 } }
	else_if = { limit = { is_capital = yes owner = { total_development = 2000 } } change_variable = { PG_urbanupper = 4 } }
	else_if = { limit = { is_capital = yes owner = { total_development = 1500 } } change_variable = { PG_urbanupper = 3 } }
	else_if = { limit = { is_capital = yes owner = { total_development = 1000 } } change_variable = { PG_urbanupper = 2 } }
	else_if = { limit = { is_capital = yes owner = { total_development = 500 } }  change_variable = { PG_urbanupper = 1.5 } }
}

PG_update_inforange = {
	# Set main province's value, and compare
	export_to_variable = { which = tp_base value = province_trade_power } set_variable = { which = tp_compare which = tp_base }
	export_to_variable = { which = tp_infomod value = modifier:local_institution_spread } change_variable = { tp_infomod = 0.5 } # info: base -50%
	if = { limit = { check_variable = { tp_infomod = 0.9 } } set_variable = { which = tp_infomod value = 0.9 } } # max 90%, at least 10% attrition

	# Look at each of the neighbours values, and "compare" while updating
	every_neighbor_province = {
		export_to_variable = { which = tp_compare value = province_trade_power }
		set_variable = { which = tp_infomod which = PREV } multiply_variable = { which = tp_compare which = tp_infomod } # use info % from base prov
		if = { limit = { check_variable = { which = tp_old which = tp_compare } } set_variable = { which = tp_compare which = tp_old } }
		if = {
			limit = { check_variable = { which = tp_compare which = PREV } }	# here which prev = the original province
			PREV = { set_variable = { which = tp_compare which = PREV } } 		# here which prev = the neighbor, so, moving the neighbors to you
		}
	}
	set_variable = { which = PG_info_range which = tp_compare } set_variable = { which = tp_old which = tp_compare }
	set_variable = { which = tp_infodisp which = tp_infomod } 	multiply_variable = { which = tp_old which = tp_infomod }
	# compare after passing all neighboring values (highest possible value). Final will be used for travel; old to check later on

}

##########
#	MIGRATION EFFECTS, prepare to get a headache!
##########

# the find target provinces. There are three versions:
#	original version: only to be executed in "manual" events, it takes a lot to search
#	second version: expanded version, only use manually as well
#	third version: doesn't search everywhere, but only within your capital region OR that province's capital OR active trade nodes.
#			this one is the automatic event-friendly, to avoid lag in the game.


PG_find_target_province = {
	# very high CoT
	if = {
		limit = {
			any_province = {
				NOT = { province_distance = { who = PREV distance = $range$ } } check_variable = { urban_growth = 1.2 }
				NOT = { has_province_modifier = PG_new_pop }					province_has_center_of_trade_of_level = 2
			}
		}
		random_province = {
			limit = {
				NOT = { province_distance = { who = PREV distance = $range$ } }	check_variable = { urban_growth = 1.2 }
				NOT = { has_province_modifier = PG_new_pop }					province_has_center_of_trade_of_level = 2
			}
			save_event_target_as = PG_target
		}
	}
	# "normal" CoT
	else_if = {
		limit = {
			any_province = {
				NOT = { province_distance = { who = PREV distance = $range$ } } check_variable = { urban_growth = 1.2 }
				NOT = { has_province_modifier = PG_new_pop }					province_has_center_of_trade_of_level = 1
			}
		}
		random_province = {
			limit = {
				NOT = { province_distance = { who = PREV distance = $range$ } }	check_variable = { urban_growth = 1.2 }
				NOT = { has_province_modifier = PG_new_pop }					province_has_center_of_trade_of_level = 1
			}
			save_event_target_as = PG_target
		}
	}
	# any other place
	else_if = {
		limit = {
			any_province = {
				NOT = { province_distance = { who = PREV distance = $range$ } } NOT = { has_province_modifier = PG_new_pop }
				OR = { check_variable = { rural_growth = 1.2 } check_variable = { urban_growth = 1.2 } }
			}
		}
		random_province = {
			limit = {
				NOT = { province_distance = { who = PREV distance = $range$ } } NOT = { has_province_modifier = PG_new_pop }
				OR = { check_variable = { rural_growth = 1.2 } check_variable = { urban_growth = 1.2 } }
			}
			save_event_target_as = PG_target
		}
	}
	else = { 	# nowhere to go -> starvation!
		set_province_flag = PG_starvation_start
	}

}


PG_find_target_province_2 = {
	# Destination priorities for those who want to leave:
	# 1- High CoT (lv 5 or higher, or lv2 in old system)
	# 2- Simple CoT (lv2 / lv1)
	# 3- Same culture
	# 4- Same culture group
	# 5- Same religion
	# 6- Owned by same country
	# 7- Anything else, both tribal and commoner

	# 1- high CoT
	if = {
		limit = {
			any_province = {
				NOT = { province_distance = { who = PREV distance = $range$ } } NOT = { PG_trigger_has_new_pop = yes }
				check_variable = { PG_com_grow = 120 }							province_has_center_of_trade_of_level = 5
				NOT = { has_province_flag = PG_trib_migr_target }
			}
		}
		random_province = {
			limit = {
				NOT = { province_distance = { who = PREV distance = $range$ } }	NOT = { PG_trigger_has_new_pop = yes }
				check_variable = { PG_com_grow = 120 }							province_has_center_of_trade_of_level = 5
				NOT = { has_province_flag = PG_trib_migr_target }
			}
			PG_migr_target_fixed = yes
		}
	}
	# 2- "normal" CoT
	else_if = {
		limit = {
			any_province = {
				NOT = { province_distance = { who = PREV distance = $range$ } } NOT = { PG_trigger_has_new_pop = yes }
				check_variable = { PG_com_grow = 120 }							province_has_center_of_trade_of_level = 2
				NOT = { has_province_flag = PG_trib_migr_target }
			}
		}
		random_province = {
			limit = {
				NOT = { province_distance = { who = PREV distance = $range$ } }	NOT = { PG_trigger_has_new_pop = yes }
				check_variable = { PG_com_grow = 120 }							province_has_center_of_trade_of_level = 2
				NOT = { has_province_flag = PG_trib_migr_target }
			}
			PG_migr_target_fixed = yes
		}
	}
	# 3- Same culture
	else_if = {
		limit = {
			any_province = {
				NOT = { province_distance = { who = PREV distance = $range$ } } NOT = { PG_trigger_has_new_pop = yes }
				OR = { check_variable = { PG_trb_grow = 120 } check_variable = { PG_com_grow = 120 } }
				culture = PREV
				NOT = { has_province_flag = PG_trib_migr_target }
			}
		}
		random_province = {
			limit = {
				NOT = { province_distance = { who = PREV distance = $range$ } } NOT = { PG_trigger_has_new_pop = yes }
				OR = { check_variable = { PG_trb_grow = 120 } check_variable = { PG_com_grow = 120 } }
				culture = PREV
				NOT = { has_province_flag = PG_trib_migr_target }
			}
			PG_migr_target_fixed = yes
		}
	}
	# 4- Same culture group
	else_if = {
		limit = {
			any_province = {
				NOT = { province_distance = { who = PREV distance = $range$ } } NOT = { PG_trigger_has_new_pop = yes }
				OR = { check_variable = { PG_trb_grow = 120 } check_variable = { PG_com_grow = 120 } }
				culture_group = PREV
				NOT = { has_province_flag = PG_trib_migr_target }
			}
		}
		random_province = {
			limit = {
				NOT = { province_distance = { who = PREV distance = $range$ } } NOT = { PG_trigger_has_new_pop = yes }
				OR = { check_variable = { PG_trb_grow = 120 } check_variable = { PG_com_grow = 120 } }
				culture_group = PREV
				NOT = { has_province_flag = PG_trib_migr_target }
			}
			PG_migr_target_fixed = yes
		}
	}
	# 5- Same religion
	else_if = {
		limit = {
			any_province = {
				NOT = { province_distance = { who = PREV distance = $range$ } } NOT = { PG_trigger_has_new_pop = yes }
				OR = { check_variable = { PG_trb_grow = 120 } check_variable = { PG_com_grow = 120 } }
				religion = PREV
				NOT = { has_province_flag = PG_trib_migr_target }
			}
		}
		random_province = {
			limit = {
				NOT = { province_distance = { who = PREV distance = $range$ } } NOT = { PG_trigger_has_new_pop = yes }
				OR = { check_variable = { PG_trb_grow = 120 } check_variable = { PG_com_grow = 120 } }
				religion = PREV
				NOT = { has_province_flag = PG_trib_migr_target }
			}
			PG_migr_target_fixed = yes
		}
	}
	# 6- any other place
	else_if = {
		limit = {
			any_province = {
				NOT = { province_distance = { who = PREV distance = $range$ } } NOT = { PG_trigger_has_new_pop = yes }
				OR = { check_variable = { PG_trb_grow = 120 } check_variable = { PG_com_grow = 120 } }
				NOT = { has_province_flag = PG_trib_migr_target }
			}
		}
		random_province = {
			limit = {
				NOT = { province_distance = { who = PREV distance = $range$ } } NOT = { PG_trigger_has_new_pop = yes }
				OR = { check_variable = { PG_trb_grow = 120 } check_variable = { PG_com_grow = 120 } }
				NOT = { has_province_flag = PG_trib_migr_target }
			}
			PG_migr_target_fixed = yes
		}
	}

	else = { 	# nowhere to go -> starvation!
		set_province_flag = PG_starvation_start
	}

}



PG_find_target_prov_active_tn = {
	# Same as the number 2, but limited to provinces with an active merchant. And 75% chance, to spice things a bit

	# Destination priorities for those who want to leave:
	# 1- High CoT (lv 5 or higher, or lv2 in old system)
	# 2- Simple CoT (lv2 / lv1)
	# 3- Same culture
	# 4- Same culture group
	# 5- Same religion
	# 6- Owned by same country
	# 7- Anything else, both tribal and commoner

	set_variable = { which = PS_travel_total value = $range$ }

	# Important note for those reading the code. Compared to the other two "province searchers", this has MANY IFs at once, not a single if/else_if long chain. Therefore, it will actually search in all those provinces, and it depends on whether it found something or not (the province flag you see as "target success"). Careful with that.
	# The main reason of that was to avoid having the scopes "any province" and "random province", since these are "global" and require lot of computing power.

	# Scopes: origin province: THIS, ROOT (doesn't work), or nothing. Owner: event_target:PG_migr_start_owner

	# 1- high CoT
	if = {
		limit = { NOT = { has_province_flag = PG_target_success } }		# will block future ifs with this
		owner = {
			random_active_trade_node = {
				random_trade_node_member_province = {
					limit = {
						NOT = { province_distance = { who = event_target:PG_migr_origin_prov distance = $range$ } }
						NOT = { PG_trigger_has_new_pop = yes }
						check_variable = { PG_com_grow = 120 }							province_has_center_of_trade_of_level = 1
						NOT = { has_province_flag = PG_trib_migr_target }				#has_merchant = event_target:PG_migr_start_owner
					}
					#random = {
					#	chance = 75
					PG_migr_target_fixed = yes
					event_target:PG_migr_origin_prov = { set_province_flag = PG_provtarget_highcot }
					#}
				}
			}
		}
	}
	# 2- "normal" CoT
	if = {
		limit = { NOT = { has_province_flag = PG_target_success } }		# will block future ifs with this
		owner = {
			random_active_trade_node = {
				random_trade_node_member_province = {
					limit = {
						NOT = { province_distance = { who = PREV distance = $range$ } }	NOT = { PG_trigger_has_new_pop = yes }
						check_variable = { PG_com_grow = 120 }							province_has_center_of_trade_of_level = 1
						NOT = { has_province_flag = PG_trib_migr_target }				has_merchant = event_target:PG_migr_start_owner
					}
					random = {
						chance = 40
						PG_migr_target_fixed = yes
						event_target:PG_migr_origin_prov = { set_province_flag = PG_provtarget_lowcot }
					}
				}
			}
		}
	}
	# 3- Same culture
	if = {
		limit = { NOT = { has_province_flag = PG_target_success } }		# will block future ifs with this
		owner = {
			random_active_trade_node = {
				random_trade_node_member_province = {
					limit = {
						NOT = { province_distance = { who = PREV distance = $range$ } } NOT = { PG_trigger_has_new_pop = yes }
						OR = { check_variable = { PG_trb_grow = 120 } check_variable = { PG_com_grow = 120 } }
						culture = PREV
						NOT = { has_province_flag = PG_trib_migr_target }				has_merchant = event_target:PG_migr_start_owner
					}
					random = {
						chance = 40
						PG_migr_target_fixed = yes
						event_target:PG_migr_origin_prov = { set_province_flag = PG_provtarget_samecult }
					}
				}
			}
		}
	}
	# 4- Same culture group
	if = {
		limit = { NOT = { has_province_flag = PG_target_success } }		# will block future ifs with this
		owner = {
			random_active_trade_node = {
				random_trade_node_member_province = {
					limit = {
						NOT = { province_distance = { who = PREV distance = $range$ } } NOT = { PG_trigger_has_new_pop = yes }
						OR = { check_variable = { PG_trb_grow = 120 } check_variable = { PG_com_grow = 120 } }
						culture_group = PREV
						NOT = { has_province_flag = PG_trib_migr_target }				has_merchant = event_target:PG_migr_start_owner
					}
					random = {
						chance = 40
						PG_migr_target_fixed = yes
						event_target:PG_migr_origin_prov = { set_province_flag = PG_provtarget_samegroup }
					}
				}
			}
		}
	}
	# 5- Same religion
	if = {
		limit = { NOT = { has_province_flag = PG_target_success } }		# will block future ifs with this
		owner = {
			random_active_trade_node = {
				random_trade_node_member_province = {
					limit = {
						NOT = { province_distance = { who = PREV distance = $range$ } } NOT = { PG_trigger_has_new_pop = yes }
						OR = { check_variable = { PG_trb_grow = 120 } check_variable = { PG_com_grow = 120 } }
						religion = PREV
						NOT = { has_province_flag = PG_trib_migr_target }				has_merchant = event_target:PG_migr_start_owner
					}
					random = {
						chance = 40
						PG_migr_target_fixed = yes
						event_target:PG_migr_origin_prov = { set_province_flag = PG_provtarget_samerel }
					}
				}
			}
		}
	}
	# 6- any other place
	if = {
		limit = { NOT = { has_province_flag = PG_target_success } }		# will block future ifs with this
		owner = {
			random_active_trade_node = {
				random_trade_node_member_province = {
					limit = {
						NOT = { province_distance = { who = PREV distance = $range$ } } NOT = { PG_trigger_has_new_pop = yes }
						OR = { check_variable = { PG_trb_grow = 120 } check_variable = { PG_com_grow = 120 } }
						NOT = { has_province_flag = PG_trib_migr_target }				has_merchant = event_target:PG_migr_start_owner
					}
					PG_migr_target_fixed = yes
					event_target:PG_migr_origin_prov = { set_province_flag = PG_provtarget_other }
				}
			}
		}
	}

	if = {
		limit = { NOT = { has_province_flag = PG_target_success } }		# still has not found a suitable place, and nowhere to go -> starvation!
		set_province_flag = PG_starvation_start
	}

}


PG_migr_target_fixed = {			# Must be scoped to the target province, and Prev is the origin province
	set_variable = { which = prov_id which = prov_id_base }
	save_event_target_as = PG_prov_targeted
	set_province_flag = PG_trib_migr_target
	event_target:PG_migr_origin_prov = {
		set_variable = { which = prov_id which = PREV }
		set_variable = { which = PG_migration_to which = prov_id }
		set_province_flag = PG_trib_migr_start
		set_province_flag = PG_target_success
	}

}

mig_dist_budget = {
	if = { 		limit = { province_distance = { who = PREV distance = 1500 } } 	PREV = { set_variable = { which = PG_mig_budget value = 150 } } }
	else_if = { limit = { province_distance = { who = PREV distance = 1000 } } 	PREV = { set_variable = { which = PG_mig_budget value = 120 } } }
	else_if = { limit = { province_distance = { who = PREV distance = 700 } } 	PREV = { set_variable = { which = PG_mig_budget value = 100 } } }
	else_if = { limit = { province_distance = { who = PREV distance = 500 } } 	PREV = { set_variable = { which = PG_mig_budget value = 80 } } }
	else_if = { limit = { province_distance = { who = PREV distance = 350 } } 	PREV = { set_variable = { which = PG_mig_budget value = 70 } } }
	else_if = { limit = { province_distance = { who = PREV distance = 200 } } 	PREV = { set_variable = { which = PG_mig_budget value = 50 } } }
	else_if = { limit = { province_distance = { who = PREV distance = 120 } } 	PREV = { set_variable = { which = PG_mig_budget value = 40 } } }
	else_if = { limit = { province_distance = { who = PREV distance = 50 } } 	PREV = { set_variable = { which = PG_mig_budget value = 20 } } }
	else_if = { 																PREV = { set_variable = { which = PG_mig_budget value = 10 } } }

}
mig_dist_budget1 = {
	if = { 		limit = { province_distance = { who = PREV distance = 1500 } } 	PREV = { set_variable = { which = PG_mig_budget1 value = 150 } } }
	else_if = { limit = { province_distance = { who = PREV distance = 1000 } } 	PREV = { set_variable = { which = PG_mig_budget1 value = 120 } } }
	else_if = { limit = { province_distance = { who = PREV distance = 700 } } 	PREV = { set_variable = { which = PG_mig_budget1 value = 100 } } }
	else_if = { limit = { province_distance = { who = PREV distance = 500 } } 	PREV = { set_variable = { which = PG_mig_budget1 value = 80 } } }
	else_if = { limit = { province_distance = { who = PREV distance = 350 } } 	PREV = { set_variable = { which = PG_mig_budget1 value = 70 } } }
	else_if = { limit = { province_distance = { who = PREV distance = 200 } } 	PREV = { set_variable = { which = PG_mig_budget1 value = 50 } } }
	else_if = { limit = { province_distance = { who = PREV distance = 120 } } 	PREV = { set_variable = { which = PG_mig_budget1 value = 40 } } }
	else_if = { limit = { province_distance = { who = PREV distance = 50 } } 	PREV = { set_variable = { which = PG_mig_budget1 value = 20 } } }
	else_if = { 																PREV = { set_variable = { which = PG_mig_budget1 value = 10 } } }

}
mig_dist_budget2 = {
	if = { 		limit = { province_distance = { who = PREV distance = 1500 } } 	PREV = { set_variable = { which = PG_mig_budget2 value = 150 } } }
	else_if = { limit = { province_distance = { who = PREV distance = 1000 } } 	PREV = { set_variable = { which = PG_mig_budget2 value = 120 } } }
	else_if = { limit = { province_distance = { who = PREV distance = 700 } } 	PREV = { set_variable = { which = PG_mig_budget2 value = 100 } } }
	else_if = { limit = { province_distance = { who = PREV distance = 500 } } 	PREV = { set_variable = { which = PG_mig_budget2 value = 80 } } }
	else_if = { limit = { province_distance = { who = PREV distance = 350 } } 	PREV = { set_variable = { which = PG_mig_budget2 value = 70 } } }
	else_if = { limit = { province_distance = { who = PREV distance = 200 } } 	PREV = { set_variable = { which = PG_mig_budget2 value = 50 } } }
	else_if = { limit = { province_distance = { who = PREV distance = 120 } } 	PREV = { set_variable = { which = PG_mig_budget2 value = 40 } } }
	else_if = { limit = { province_distance = { who = PREV distance = 50 } } 	PREV = { set_variable = { which = PG_mig_budget2 value = 20 } } }
	else_if = { 																PREV = { set_variable = { which = PG_mig_budget2 value = 10 } } }

}


mig_dist_cost = {
	if = { 		limit = { province_distance = { who = PREV distance = 1500 } } 	PREV = { owner = { add_treasury = -150 } } }
	else_if = { limit = { province_distance = { who = PREV distance = 1000 } } 	PREV = { owner = { add_treasury = -120 } } }
	else_if = { limit = { province_distance = { who = PREV distance = 700 } } 	PREV = { owner = { add_treasury = -100 } } }
	else_if = { limit = { province_distance = { who = PREV distance = 500 } } 	PREV = { owner = { add_treasury = -80 } } }
	else_if = { limit = { province_distance = { who = PREV distance = 350 } } 	PREV = { owner = { add_treasury = -70 } } }
	else_if = { limit = { province_distance = { who = PREV distance = 200 } } 	PREV = { owner = { add_treasury = -50 } } }
	else_if = { limit = { province_distance = { who = PREV distance = 120 } } 	PREV = { owner = { add_treasury = -40 } } }
	else_if = { limit = { province_distance = { who = PREV distance = 50 } } 	PREV = { owner = { add_treasury = -20 } } }
	else = { 																	PREV = { owner = { add_treasury = -10 } } }

}

# MIGRATION EFFECTS
# I have divided them in several types. Basically which kind of pop comes (tribal or commoner), and their reason to leave (normal, refugees, expelled, etc). This depends on what will happen with the origin country.

# Migration from tribal, "happy" (voluntary, with money/skills, with happy origin country)


PG_migrate_tribal_happy = {
	# Origin province
	PREV = {
		add_base_manpower = -$size$ 	change_variable = { PS_rur_emig = $size$ }
		set_variable = { which = prov_id which = prov_id_base }
	}
	# Destination province
	if = {
		limit = { check_variable = { PG_com_grow = 120 } }
		add_base_production = $size$

	}
	else = {
		add_base_manpower = $size$

	}
	set_variable = { which = prov_id which = PREV }	set_variable = { which = PG_mig_trb_origin which = prov_id }
	set_variable = { which = prov_id which = prov_id_base }

	# Newcomer modifier, depending on culture and religion
	if = {
		limit = { culture = PREV	religion = PREV }
		add_province_modifier = { name = PG_migr_new_allsame duration = 730 }
	}
	else_if = {
		limit = { culture_group = PREV	religion = PREV }	# no primary culture, but same culture group AND religion
		add_province_modifier = { name = PG_migr_new_cultgroup duration = 730 }

		# latent event, pending
	}
	else_if = {
		limit = { culture_group = PREV	NOT = { religion = PREV } }	# culture group, but different religion
		add_province_modifier = { name = PG_migr_new_otherrelg duration = 730 }
		# latent event
	}
	else_if = {
		limit = {
			owner = { culture_group = event_target:PG_origin_prov }  # newcomers are the same culture group as the destination owner
			NOT = { culture_group = PREV }
		}

		add_province_modifier = { name = PG_migr_new_rulercult duration = 730 }
		# latent event
	}
	else_if = {
		limit = { NOT = { culture_group = PREV } religion = PREV }	# No culture group, but same religion

		add_province_modifier = { name = PG_migr_new_none_neutral duration = 730 }

		# latent event
	}
	else_if = {
		limit = { NOT = { culture_group = PREV } }	# totally alien: no culture group nor religion
		random_list = {
			70 = {
				add_province_modifier = { name = PG_migr_new_none_neutral duration = 730 }
			}
			30 = {
				add_province_modifier = { name = PG_migr_new_none_tension duration = 730 }
			}
			# latent event, tries to change culture
		}
	}

	# Finish
	set_variable = { which = PG_trb_migsize value = 0 }
}

PG_change_culture_attempt = {
	# "Formula" of this culture change %: base values + migration size (-1) + strength of the effect / total population, AFTER arrival

	export_to_variable = { which = PG_cultconv_points value = trigger_value:num_accepted_cultures who = ROOT }
	change_variable = { PG_cultconv_points = $strength$ }
	export_to_variable = { which = PG_cultconv_denominator value = development }
	multiply_variable = { PG_cultconv_denominator = 0.3 }
	if = {
		limit = { check_variable = { which = PG_cultconv_points which = PG_cultconv_denominator } }	# if already >30%, capped
		set_variable = { which = PG_cultconv_points which = PG_cultconv_denominator }
	}
	change_variable = { which = PG_cultconv_points which = PG_trb_migsize } subtract_variable =  { PG_cultconv_points = 1 }
	export_to_variable = { which = PG_cultconv_denominator value = development }

	# Final division, will determine the randomizer
	divide_variable = { which = PG_cultconv_points which = PG_cultconv_denominator }
	if = { 		limit = { check_variable = { PG_cultconv_points = 0.8 } } PG_change_culture_random = { perc_chance = 80 } }
	else_if = { limit = { check_variable = { PG_cultconv_points = 0.7 } } PG_change_culture_random = { perc_chance = 70 } }
	else_if = { limit = { check_variable = { PG_cultconv_points = 0.6 } } PG_change_culture_random = { perc_chance = 60 } }
	else_if = { limit = { check_variable = { PG_cultconv_points = 0.5 } } PG_change_culture_random = { perc_chance = 50 } }
	else_if = { limit = { check_variable = { PG_cultconv_points = 0.4 } } PG_change_culture_random = { perc_chance = 40 } }
	else_if = { limit = { check_variable = { PG_cultconv_points = 0.3 } } PG_change_culture_random = { perc_chance = 30 } }
	else_if = { limit = { check_variable = { PG_cultconv_points = 0.2 } } PG_change_culture_random = { perc_chance = 20 } }
	else_if = { limit = { check_variable = { PG_cultconv_points = 0.1 } } PG_change_culture_random = { perc_chance = 15 } }
	else = {	PG_change_culture_random = { perc_chance = 10 }		}
	set_variable = { which = PG_cultconv_points value = 0 }
	set_variable = { which = PG_cultconv_denominator value = 0 }
}
PG_change_culture_random = {
	random = {
		chance = $perc_chance$
		export_to_variable = { which = PG_previous_culture value = culture }	# Stores previous culture in a variable, in case it fights back
		change_culture = PREV
	}
}
PG_change_culture_def = {
	export_to_variable = { which = PG_previous_culture value = culture }	# Stores previous culture in a variable, in case it fights back
	change_culture = $new_culture$

}


PG_migrate_freedmen = {
	# Origin province
	ROOT = {
		subtract_variable = { freedmen_new = 10 }
	}
	# Destination province
	if = {
		limit = { check_variable = { PG_com_grow = 120 } }
		add_base_production = 1
		change_variable = { PS_urb_imig = 1 }
	}
	else_if = {
		limit = { check_variable = { PG_trb_grow = 120 } }	# it should always fire, but who knows
		add_base_manpower = 1
		change_variable = { PS_rur_imig = 1 }
	}

	# Newcomer modifier
	add_province_modifier = { name = PG_new_freedmen duration = 730 }

}


# to be done later:
# Migration from tribal, "poor" (voluntary, but without money/skills) -> only go for Tribal jobs, even if common jobs are available.
# 	They may settle in places where there is not enough growth (range 90% to 120%), will create discontent
# Migration from tribal, "escaped" (involuntary, will take a relations hit with the previous owner)
# Migration from commoners, "happy" (voluntary, more % of additional trade good, more good relations. Only happen with very high growth, 150%+)
# Migration from commoners, "poor" (voluntary, no trade good, no effects on relations, may go to 90-120% places).
# Migration from commoners, "admins" (sent by the state, more effect on changing culture)

mig_rural_to_urban = {
	# Origin province
	PREV = {
		subtract_variable = { which = mig_size value = $no$ }
		add_base_manpower = -$no$ 	change_variable = { PS_rur_emig = $no$ }

	}
	# Destination province
	add_base_production = $no$ 	add_province_modifier = { name = PG_new_pop duration = 365 }	change_variable = { PS_urb_imig = $no$ }
	set_variable = { which = PG_newpop value = $no$ } 			set_variable = { which = PG_provid which = PREV }
	set_variable = { which = PG_idorigin which = PG_provid } 	set_variable = { which = PG_provid value = 0 }
}

mig_rural_to_rural = {
	# Origin province
	PREV = {
		subtract_variable = { which = mig_size value = $no$ }
		add_base_manpower = -$no$  	change_variable = { PS_rur_emig = $no$ }
	}
	# Destination province
	add_base_manpower = $no$ 	add_province_modifier = { name = PG_new_pop duration = 365 }	change_variable = { PS_rur_imig = $no$ }
	set_variable = { which = PG_newpop value = $no$ } 			set_variable = { which = PG_provid which = PREV }
	set_variable = { which = PG_idorigin which = PG_provid } 	set_variable = { which = PG_provid value = 0 }
}

PG_inland_navalsize = {
	# cleanup previous modifiers
	if = { limit = { has_province_modifier = PG_navsize_16 } 	remove_province_modifier = PG_navsize_16 }
	if = { limit = { has_province_modifier = PG_navsize_8 } 	remove_province_modifier = PG_navsize_8 }
	if = { limit = { has_province_modifier = PG_navsize_4 } 	remove_province_modifier = PG_navsize_4 }
	if = { limit = { has_province_modifier = PG_navsize_2 } 	remove_province_modifier = PG_navsize_2 }
	if = { limit = { has_province_modifier = PG_navsize_1 } 	remove_province_modifier = PG_navsize_1 }
	if = { limit = { has_province_modifier = PG_navsize_0.5 } 	remove_province_modifier = PG_navsize_0.5 }
	if = { limit = { has_province_modifier = PG_navsize_0.25 } 	remove_province_modifier = PG_navsize_0.25 }
	if = { limit = { has_province_modifier = PG_navsize_0.125 } remove_province_modifier = PG_navsize_0.125 }

	# calculate
	export_to_variable = { which = PG_nav value = base_manpower } 		multiply_variable = { PG_nav = 0.05 }
	export_to_variable = { which = PG_cnav value = base_production } 	multiply_variable = { PG_cnav = 0.10 }
	export_to_variable = { which = PG_unav value = base_tax } 			multiply_variable = { PG_unav = 0.50 } # must match static modifiers
	change_variable = { which = PG_nav which = PG_cnav }
	change_variable = { which = PG_nav which = PG_unav }
	set_variable = { which = PG_cnav value = 0 }
	set_variable = { which = PG_unav value = 0 }

	# Now we have the amount of ships to be deducted
	if = { limit = { check_variable = { PG_nav = 16 } } 	PG_reduce_navalsize = { amt = 16 } }
	if = { limit = { check_variable = { PG_nav = 8 } } 		PG_reduce_navalsize = { amt = 8 } }
	if = { limit = { check_variable = { PG_nav = 4 } } 		PG_reduce_navalsize = { amt = 4 } }
	if = { limit = { check_variable = { PG_nav = 2 } } 		PG_reduce_navalsize = { amt = 2 } }
	if = { limit = { check_variable = { PG_nav = 1 } } 		PG_reduce_navalsize = { amt = 1 } }
	if = { limit = { check_variable = { PG_nav = 0.5 } } 	PG_reduce_navalsize = { amt = 0.5 } }
	if = { limit = { check_variable = { PG_nav = 0.25 } } 	PG_reduce_navalsize = { amt = 0.25 } }
	if = { limit = { check_variable = { PG_nav = 0.125 } } 	PG_reduce_navalsize = { amt = 0.125 } }
	set_variable = { which = PG_nav value = 0 }

}

PG_riverport_navalsize = {
	# cleanup previous modifiers
	if = { limit = { has_province_modifier = PG_riversize_16 } 		remove_province_modifier = PG_riversize_16 }
	if = { limit = { has_province_modifier = PG_riversize_8 } 		remove_province_modifier = PG_riversize_8 }
	if = { limit = { has_province_modifier = PG_riversize_4 } 		remove_province_modifier = PG_riversize_4 }
	if = { limit = { has_province_modifier = PG_riversize_2 } 		remove_province_modifier = PG_riversize_2 }
	if = { limit = { has_province_modifier = PG_riversize_1 } 		remove_province_modifier = PG_riversize_1 }
	if = { limit = { has_province_modifier = PG_riversize_0.5 } 	remove_province_modifier = PG_riversize_0.5 }
	if = { limit = { has_province_modifier = PG_riversize_0.25 } 	remove_province_modifier = PG_riversize_0.25 }
	if = { limit = { has_province_modifier = PG_riversize_0.125 } 	remove_province_modifier = PG_riversize_0.125 }

	# calculate
	# different from before: buildings also affected. These buildings can't exist in-land, so no need to code it
	set_variable = { which = PG_nav value = 0 }

	trigger_switch = {					# Should be the same as in the common/buildings file
		on_trigger = has_building
		small_harbor = { change_variable = { PG_nav = 2 } }
		big_harbor = { change_variable = { PG_nav = 3 } }
		harbor_district = { change_variable = { PG_nav = 4 } }
	}
	#if = { 		limit = { province_has_center_of_trade_of_level = 3 } change_variable = { PG_nav = 5 } }	# Same as in common/cot
	#else_if = { limit = { province_has_center_of_trade_of_level = 2 } change_variable = { PG_nav = 3 } }
	#else_if = { limit = { province_has_center_of_trade_of_level = 1 } change_variable = { PG_nav = 1 } }	# removed due to expanded CoTs

	export_to_variable = { which = PG_tnav value = base_manpower } 		multiply_variable = { PG_tnav = 0.05 }
	export_to_variable = { which = PG_cnav value = base_production } 	multiply_variable = { PG_cnav = 0.10 }
	export_to_variable = { which = PG_unav value = base_tax } 			multiply_variable = { PG_unav = 0.50 }
	change_variable = { which = PG_nav which = PG_tnav }
	change_variable = { which = PG_nav which = PG_cnav }
	change_variable = { which = PG_nav which = PG_unav }

	# River port effect: -50% naval forcelimit
	multiply_variable = { PG_nav = 0.5 }
	set_variable = { which = PG_tnav value = 0 } set_variable = { which = PG_cnav value = 0 } set_variable = { which = PG_unav value = 0 }

	# Now we have the amount of ships to be deducted
	if = { limit = { check_variable = { PG_nav = 16 } } 	PG_reduce_riversize = { amt = 16 } }
	if = { limit = { check_variable = { PG_nav = 8 } } 		PG_reduce_riversize = { amt = 8 } }
	if = { limit = { check_variable = { PG_nav = 4 } } 		PG_reduce_riversize = { amt = 4 } }
	if = { limit = { check_variable = { PG_nav = 2 } } 		PG_reduce_riversize = { amt = 2 } }
	if = { limit = { check_variable = { PG_nav = 1 } } 		PG_reduce_riversize = { amt = 1 } }
	if = { limit = { check_variable = { PG_nav = 0.5 } } 	PG_reduce_riversize = { amt = 0.5 } }
	if = { limit = { check_variable = { PG_nav = 0.25 } } 	PG_reduce_riversize = { amt = 0.25 } }
	if = { limit = { check_variable = { PG_nav = 0.125 } } 	PG_reduce_riversize = { amt = 0.125 } }
	set_variable = { which = PG_nav value = 0 }

}


PG_reduce_navalsize = {
	subtract_variable = { which = PG_nav value = $amt$ }
	add_province_modifier = { name = PG_navsize_$amt$ duration = -1 hidden = yes }

}
PG_reduce_riversize = {
	subtract_variable = { which = PG_nav value = $amt$ }
	add_province_modifier = { name = PG_riversize_$amt$ duration = -1 hidden = yes }	# Different modifier

}




