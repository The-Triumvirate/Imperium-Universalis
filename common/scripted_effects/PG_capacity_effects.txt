

##########
#	POPGROWTH CAPACITY EFFECTS. A new iteration of the code structure, dated 2024
#	Any question, ask us in Discord, or @mrkcosta directly, if I'm available
##########

PG_rurcap1_terrain = {
	# PG_rurcap1 = size x terrain x infra building
	# PG_rurmax1 = size x terrain x infra max

	set_variable = { which = PG_rurcap1 which = prov_size }
	set_variable = { which = PG_rurmax1 which = prov_size }


	trigger_switch = {
		on_trigger = has_terrain		# Here tiers = buildings present
		# Farmlands
		farmlands = { 		PG_terr_calc = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 tier0 = 1.10 } }
		rome_t = { 			PG_terr_calc = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 tier0 = 1.10 } }
		carthage_t = { 		PG_terr_calc = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 tier0 = 1.10 } }
		athen_t = { 		PG_terr_calc = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 tier0 = 1.10 } }
		neapel_t = { 		PG_terr_calc = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 tier0 = 1.10 } }
		byzantion_t = { 	PG_terr_calc = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 tier0 = 1.10 } }
		syracuse_t = { 		PG_terr_calc = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 tier0 = 1.10 } }
		milet_t = { 		PG_terr_calc = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 tier0 = 1.10 } }
		ephesus_t = { 		PG_terr_calc = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 tier0 = 1.10 } }
		corinth_t = { 		PG_terr_calc = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 tier0 = 1.10 } }
		sardis_t = { 		PG_terr_calc = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 tier0 = 1.10 } }
		susa_t = { 			PG_terr_calc = { tier4 = 1.60 tier3 = 1.50 tier2 = 1.30 tier1 = 1.10 tier0 = 1.10 } }
		tyros_t = { 		PG_terr_calc = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 tier0 = 1.10 } }
		halicarnassus_t = { PG_terr_calc = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 tier0 = 1.10 } }
		argos_t = { 		PG_terr_calc = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 tier0 = 1.10 } }
		# Grasslands
		grasslands = { 		PG_terr_calc = { tier4 = 1.25 tier3 = 1.20 tier2 = 1.10 tier1 = 1.00 tier0 = 1.00 } }
		steppe = { 			PG_terr_calc = { tier4 = 0.95 tier3 = 0.90 tier2 = 0.60 tier1 = 0.50 tier0 = 0.50 } }
		savannah = { 		PG_terr_calc = { tier4 = 0.95 tier3 = 0.90 tier2 = 0.60 tier1 = 0.50 tier0 = 0.50 } }
		# Drier lands
		mediterranean = { 	PG_terr_calc = { tier4 = 1.10 tier3 = 1.05 tier2 = 0.95 tier1 = 0.80 tier0 = 0.60 } }
		drylands = { 		PG_terr_calc = { tier4 = 1.10 tier3 = 1.05 tier2 = 0.80 tier1 = 0.60 tier0 = 0.60 } }
		ninive_t = { 		PG_terr_calc = { tier4 = 1.10 tier3 = 1.05 tier2 = 0.80 tier1 = 0.60 tier0 = 0.60 } }
		# Coastals
		coastline = { 		PG_terr_calc = { tier4 = 0.95 tier3 = 0.80 tier2 = 0.60 tier1 = 0.50 tier0 = 0.50 } }
		naxos_t = { 		PG_terr_calc = { tier4 = 0.95 tier3 = 0.80 tier2 = 0.60 tier1 = 0.50 tier0 = 0.50 } }
		steep_coast = { 	PG_terr_calc = { tier4 = 0.80 tier3 = 0.70 tier2 = 0.50 tier1 = 0.40 tier0 = 0.40 } }
		patara_t = { 		PG_terr_calc = { tier4 = 0.80 tier3 = 0.70 tier2 = 0.50 tier1 = 0.40 tier0 = 0.40 } }
		coastal_desert = { 	PG_terr_calc = { tier4 = 0.80 tier3 = 0.65 tier2 = 0.40 tier1 = 0.35 tier0 = 0.35 } }
		# Forests
		woods = { 			PG_terr_calc = { tier4 = 0.90 tier3 = 0.85 tier2 = 0.65 tier1 = 0.50 tier0 = 0.50 } }
		forest = { 			PG_terr_calc = { tier4 = 0.90 tier3 = 0.85 tier2 = 0.55 tier1 = 0.40 tier0 = 0.40 } }
		forest_steppe = { 	PG_terr_calc = { tier4 = 0.90 tier3 = 0.60 tier2 = 0.40 tier1 = 0.35 tier0 = 0.35 } }
		mangrove = { 		PG_terr_calc = { tier4 = 0.90 tier3 = 0.85 tier2 = 0.50 tier1 = 0.40 tier0 = 0.40 } }
		jungle = { 			PG_terr_calc = { tier4 = 0.80 tier3 = 0.50 tier2 = 0.45 tier1 = 0.40 tier0 = 0.40 } }
		# Mountains
		hills = { 			PG_terr_calc = { tier4 = 1.10 tier3 = 1.05 tier2 = 0.80 tier1 = 0.60 tier0 = 0.60 } }
		jerusalem_t = { 	PG_terr_calc = { tier4 = 1.25 tier3 = 1.15 tier2 = 0.90 tier1 = 0.75 tier0 = 0.75 } }
		mountain = { 		PG_terr_calc = { tier4 = 0.80 tier3 = 0.70 tier2 = 0.55 tier1 = 0.50 tier0 = 0.50 } }
		highlands = { 		PG_terr_calc = { tier4 = 1.10 tier3 = 1.05 tier2 = 0.80 tier1 = 0.60 tier0 = 0.60 } }
		fertile_highlands = { PG_terr_calc = { tier4 = 1.40 tier3 = 1.35 tier2 = 1.05 tier1 = 0.80 tier0 = 0.80 } }
		parsa_t = { 		PG_terr_calc = { tier4 = 1.40 tier3 = 1.35 tier2 = 1.05 tier1 = 0.80 tier0 = 0.80 } }
		# Rivers and oasis
		oasis = { 			PG_terr_calc = { tier4 = 1.40 tier3 = 1.30 tier2 = 0.95 tier1 = 0.80 tier0 = 0.80 } }
		siwa_t = { 			PG_terr_calc = { tier4 = 1.40 tier3 = 1.30 tier2 = 0.95 tier1 = 0.80 tier0 = 0.80 } }
		mesopotamian_plain = { PG_terr_calc = { tier4 = 1.80 tier3 = 1.70 tier2 = 1.40 tier1 = 1.20 tier0 = 1.20 } }
		babil_t = { 		PG_terr_calc = { tier4 = 1.80 tier3 = 1.70 tier2 = 1.40 tier1 = 1.20 tier0 = 1.20 } }
		uruk_t = { 			PG_terr_calc = { tier4 = 1.80 tier3 = 1.70 tier2 = 1.40 tier1 = 1.20 tier0 = 1.20 } }
		nile_plain = { 		PG_terr_calc = { tier4 = 2.00 tier3 = 1.90 tier2 = 1.50 tier1 = 1.20 tier0 = 1.20 } }
		memphis_t = { 		PG_terr_calc = { tier4 = 2.40 tier3 = 2.10 tier2 = 1.80 tier1 = 1.50 tier0 = 1.50 } }
		waset_t = { 		PG_terr_calc = { tier4 = 2.00 tier3 = 1.90 tier2 = 1.50 tier1 = 1.20 tier0 = 1.20 } }
		elephantine_t = { 	PG_terr_calc = { tier4 = 2.00 tier3 = 1.90 tier2 = 1.50 tier1 = 1.20 tier0 = 1.20 } }
		desert_river = { 	PG_terr_calc = { tier4 = 1.40 tier3 = 1.35 tier2 = 1.20 tier1 = 1.00 tier0 = 1.00 } }
		assur_t = { 		PG_terr_calc = { tier4 = 1.40 tier3 = 1.35 tier2 = 1.20 tier1 = 1.00 tier0 = 1.00 } }
		# 7/10 too much water
		wetlands = { 		PG_terr_calc = { tier4 = 0.95 tier3 = 0.90 tier2 = 0.60 tier1 = 0.50 tier0 = 0.50 } }
		marsh = { 			PG_terr_calc = { tier4 = 1.05 tier3 = 0.80 tier2 = 0.45 tier1 = 0.35 tier0 = 0.35 } }
		floodplains = { 	PG_terr_calc = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 tier0 = 1.10 } }
		alluvial_plain = { 	PG_terr_calc = { tier4 = 1.60 tier3 = 1.50 tier2 = 1.30 tier1 = 1.10 tier0 = 1.10 } }
		# Deserts
		desert = { 			PG_terr_calc = { tier4 = 0.60 tier3 = 0.45 tier2 = 0.30 tier1 = 0.25 tier0 = 0.25 } }
		salt_desert = { 	PG_terr_calc = { tier4 = 0.60 tier3 = 0.45 tier2 = 0.30 tier1 = 0.25 tier0 = 0.25 } }
		desert_mountain = { PG_terr_calc = { tier4 = 0.80 tier3 = 0.70 tier2 = 0.60 tier1 = 0.40 tier0 = 0.50 } }
		arctic = { 			PG_terr_calc = { tier4 = 0.60 tier3 = 0.45 tier2 = 0.30 tier1 = 0.25 tier0 = 0.25 } }
		


	}
	
}

PG_terr_calc = {
	if = { 		limit = { has_building = hospital } 		multiply_variable = { PG_rurcap1 = $tier4$ } }
	else_if = { limit = { has_building = medicus } 			multiply_variable = { PG_rurcap1 = $tier3$ } }
	else_if = { limit = { has_building = herbalist } 		multiply_variable = { PG_rurcap1 = $tier2$ } }
	else_if = { limit = { has_building = wood_city_walls } multiply_variable = { PG_rurcap1 = $tier1$ } }	# temporary, to be changed
	else = { 											multiply_variable = { PG_rurcap1 = $tier0$ } }
	
	multiply_variable = { PG_rurmax1 = $tier4$ }
}


PG_rurcap2_climate = {
	# PG_rurcap2 = (size x climate +-tech) - size

	set_variable = { which = PG_rurcap2 which = prov_size }
	
	trigger_switch = {
		on_trigger = has_winter
		mild_winter = { 	PG_winter_calc = { tier3 = 1.00 tier2 = 1.00 tier1 = 0.80 } }	# tiers 1-2-3 are institutions
		normal_winter = { 	PG_winter_calc = { tier3 = 1.00 tier2 = 0.80 tier1 = 0.50 } }
		severe_winter = { 	PG_winter_calc = { tier3 = 0.80 tier2 = 0.50 tier1 = 0.35 } }
	}

	if = { limit = { has_climate = arid } 		multiply_variable = { PG_rurcap2 = 0.70 } }
	if = { limit = { has_climate = tropical } 	multiply_variable = { PG_rurcap2 = 0.70 } }
	trigger_switch = {
		on_trigger = province_group
		pg_monsoon_mild_group = { 	multiply_variable = { PG_rurcap2 = 0.90 } }
		pg_monsoon_normal_group = { multiply_variable = { PG_rurcap2 = 0.75 } }
		pg_monsoon_severe_group = { multiply_variable = { PG_rurcap2 = 0.60 } }
	}
	
	subtract_variable = { which = PG_rurcap2 which = prov_size }

}

PG_winter_calc = {
	
	if = { 
		limit = { OR = { 
			blast_furnace_institution = 100 
			advanced_hydraulics_institution = 100 
			owner = { has_reform = steppe_horde_reform }	# Nomads act like as if they had the most tech, but are limited from good buildings
		} }
		multiply_variable = { PG_rurcap2 = $tier3$ } 
	}
	
	else_if = { 
		limit = { OR = { 
			siege_engineering_institution = 100 
			cast_iron_institution = 100 
			owner = { government = tribal }				# Tribals (other than nomads) are like having "some" technology
		} }
		multiply_variable = { PG_rurcap2 = $tier2$ }
	}
	
	else = { multiply_variable = { PG_rurcap2 = $tier1$ } }

}


PG_rurcap3_fishing = {
	# PG_rurcap3 = fishing + buildings
	
	if = { 		limit = { check_variable = { prov_size = 11 } } set_variable = { which = PG_rurcap3 value = 4.0 } }
	else_if = { limit = { check_variable = { prov_size = 7 } } 	set_variable = { which = PG_rurcap3 value = 2.5 } }
	else_if = {	limit = { check_variable = { prov_size = 4 } } 	set_variable = { which = PG_rurcap3 value = 1.5 } }
	else_if = {	limit = { check_variable = { prov_size = 1 } } 	set_variable = { which = PG_rurcap3 value = 0.5 } }
	if = {
		limit = { OR = { has_terrain = coastline has_terrain = naxos_t 
			has_terrain = steep_coast has_terrain = patara_t has_terrain = coastal_desert } } 
		change_variable = { PG_rurcap3 = 1.0 }
	}
	trigger_switch = {
		on_trigger = has_building
		harbor_district = { change_variable = { PG_rurcap3 = 1.25 } multiply_variable = { PG_rurcap3 = 1.15 } }
		big_harbor = { 		change_variable = { PG_rurcap3 = 1.00 } }
		small_harbor = { 	change_variable = { PG_rurcap3 = 0.50 } }
	}
	if = { limit = { has_province_flag = PG_river_port } multiply_variable = { PG_rurcap3 = 0.50 }	} # River ports, -50%
	
}

PG_rurcap4_reclamation = {
		# Since both these effects are made into a modifier, it doesn't matter to show either building or province modifier. 

	# PG_rurcap4 = land reclamation
	export_to_variable = { which = PG_rurcap4 value = modifier:local_colonist_placement_chance }
	
	# PG_rurmod1 = +% from land reclamation
	export_to_variable = { which = PG_rurmod1 value = modifier:local_colony_cost_modifier }
}

PG_rurcap_modifiers = {
	# PG_rurstab = +% from country stability		--> stability should be low, like +2.5%, +5%, +10%
	if = { 		limit = { owner = { stability = 3 } } set_variable = { which = PG_rurstab value = 0.10 } }
	else_if = { limit = { owner = { stability = 2 } } set_variable = { which = PG_rurstab value = 0.05 } }
	else_if = { limit = { owner = { stability = 1 } } set_variable = { which = PG_rurstab value = 0.025 } }
	else = { set_variable = { which = PG_rurstab value = 0 } }
	
	# PG_rurdevs = +% from local devastation		--> non-linear effect
	set_variable = { which = PG_rurdevs value = 0 }
	trigger_switch = {
		on_trigger = devastation
		75 = { set_variable = { which = PG_rurdevs value = -0.80 } }
		60 = { set_variable = { which = PG_rurdevs value = -0.65 } }
		40 = { set_variable = { which = PG_rurdevs value = -0.40 } }
		20 = { set_variable = { which = PG_rurdevs value = -0.25 } }
		10 = { set_variable = { which = PG_rurdevs value = -0.10 } }
	}
}

PG_rurcap_formula = {
	set_variable = { which = PG_ruralcap which = PG_rurcap1 }

	change_variable = { which = PG_ruralcap which = PG_rurcap2 }
	change_variable = { which = PG_ruralcap which = PG_rurcap3 }
	change_variable = { which = PG_ruralcap which = PG_rurcap4 }

	set_variable = { which = float_1 value = 1 }
	change_variable = { which = float_1 which = PG_rurmod1 }
	multiply_variable = { which = PG_ruralcap which = float_1 }

	set_variable = { which = float_1 value = 1 }
	change_variable = { which = float_1 which = PG_rurstab }
	multiply_variable = { which = PG_ruralcap which = float_1 }

	set_variable = { which = float_1 value = 1 }
	change_variable = { which = float_1 which = PG_rurdevs }
	multiply_variable = { which = PG_ruralcap which = float_1 }

}


PG_urbcap1_trade = {
				
	# correct for autonomy: it can go as low as -50%, so this must be corrected back
	export_to_variable = { which = PG_urbcap1 value = local_autonomy }	multiply_variable = { PG_urbcap1 = 0.5 }
	subtract_variable = { PG_urbcap1 = 100 }							multiply_variable = { PG_urbcap1 = -0.01 }
	export_to_variable = { which = float_2 value = province_trade_power }
	divide_variable = { which = float_2 which = PG_urbcap1 }

	set_variable = { which = PG_urbcap1 value = 0 }	# Cleanup
	
	# More trade means more logistics, people employed in on-offloading ships, wealth coming from other places, etc. This will be the main source of commoner population for most of the game, until institutions and buildings kick in. 
	

	# Trade power points are less effective the bigger it is. In economics this is called "Diminishing marginal returns":
	# After trade power 10 (10 = 3 pops), every new pop will need one more point (4th pop: 4 points, 5th pop: 5 points). Capped at 15/110tp
	# So a trade power of 30 will be: 30 -10(3) -4 -5 -6 = 6 pops
	# Trade 120: 120 -10(3) -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 = 14 pops
	if = {
		limit = { check_variable = { float_2 = 109 } } 	subtract_variable = { float_2 = 109 } 
		change_variable = { PG_urbcap1 = 14 } 			divide_variable = { float_2 = 15 } 
	}
	else_if = {
		limit = { check_variable = { float_2 = 95 } } 	subtract_variable = { float_2 = 95 } 
		change_variable = { PG_urbcap1 = 13 } 			divide_variable = { float_2 = 14 } 
	}
	else_if = {
		limit = { check_variable = { float_2 = 82 } } 	subtract_variable = { float_2 = 82 } 
		change_variable = { PG_urbcap1 = 12 } 			divide_variable = { float_2 = 13 } 
	}
	else_if = {
		limit = { check_variable = { float_2 = 70 } } 	subtract_variable = { float_2 = 70 } 
		change_variable = { PG_urbcap1 = 11 } 			divide_variable = { float_2 = 12 } 
	}
	else_if = {
		limit = { check_variable = { float_2 = 59 } } 	subtract_variable = { float_2 = 59 } 
		change_variable = { PG_urbcap1 = 10 } 			divide_variable = { float_2 = 11 } 
	}
	else_if = {
		limit = { check_variable = { float_2 = 49 } } 	subtract_variable = { float_2 = 49 } 
		change_variable = { PG_urbcap1 = 9 } 			divide_variable = { float_2 = 10 } 
	}
	else_if = {
		limit = { check_variable = { float_2 = 40 } } 	subtract_variable = { float_2 = 40 } 
		change_variable = { PG_urbcap1 = 8 } 			divide_variable = { float_2 = 9 } 
	}
	else_if = {
		limit = { check_variable = { float_2 = 32 } } 	subtract_variable = { float_2 = 32 } 
		change_variable = { PG_urbcap1 = 7 } 			divide_variable = { float_2 = 8 } 
	}
	else_if = {
		limit = { check_variable = { float_2 = 25 } } 	subtract_variable = { float_2 = 25 } 
		change_variable = { PG_urbcap1 = 6 } 			divide_variable = { float_2 = 7 } 
	}
	else_if = {
		limit = { check_variable = { float_2 = 19 } } 	subtract_variable = { float_2 = 19 } 
		change_variable = { PG_urbcap1 = 5 } 			divide_variable = { float_2 = 6 } 
	}
	else_if = {
		limit = { check_variable = { float_2 = 14 } } 	subtract_variable = { float_2 = 14 } 
		change_variable = { PG_urbcap1 = 4 } 			divide_variable = { float_2 = 5 } 
	}
	else_if = {
		limit = { check_variable = { float_2 = 10 } } 	subtract_variable = { float_2 = 10 } 
		change_variable = { PG_urbcap1 = 3 } 			divide_variable = { float_2 = 4 } 
	}
	else = { divide_variable = { float_2 = 3.3 } }
	change_variable = { which = PG_urbcap1 which = float_2 }	# add the remaining trade power (applies to all)
	set_variable = { which = float_2 value = 0 }

}

PG_urbcap2_buildings = { 
	# by using an existing modifier for all buildings, now we do not need to list them all. An export of the modifier is enough. 
	export_to_variable = { which = PG_urbcap2 value = modifier:local_colonial_growth }
}

PG_urbcap_modifiers = {
	# PG_urbmod1 = +% urban infrastructure, local
	#export_to_variable = { which = PG_urbmod1 value = modifier:local_gold_depletion_chance_modifier }	# pending to add to any buildings
	
	# PG_urbmod2 = +% urban infrastructure, country
	#owner = { export_to_variable = { which = PG_urbmod2 value = modifier:PG_mod_urban_country } }	# pending to add the new country modifier
	#set_variable = { which = PG_urbmod2 which = owner } 	# I hope it works
	
	# PG_urbstab = +% from country stability
	if = { 		limit = { owner = { stability = 3 } } set_variable = { which = PG_urbstab value = 0.15 } }
	else_if = { limit = { owner = { stability = 2 } } set_variable = { which = PG_urbstab value = 0.08 } }
	else_if = { limit = { owner = { stability = 1 } } set_variable = { which = PG_urbstab value = 0.05 } }
	else = { set_variable = { which = PG_urbstab value = 0 } }
	
	# PG_urbdevs = +% from local devastation
	set_variable = { which = PG_urbdevs value = 0 }
	trigger_switch = {
		on_trigger = devastation
		75 = { set_variable = { which = PG_urbdevs value = -0.90 } }
		60 = { set_variable = { which = PG_urbdevs value = -0.75 } }
		40 = { set_variable = { which = PG_urbdevs value = -0.50 } }
		20 = { set_variable = { which = PG_urbdevs value = -0.30 } }
		10 = { set_variable = { which = PG_urbdevs value = -0.10 } }
	}
	
}

PG_urbcap_formula = {
	set_variable = { which = PG_urbancap which = PG_urbcap2 }		# only buildings get modifiers, trade is simple. 
	#set_variable = { which = float_1 value = 1 }
	#change_variable = { which = float_1 which = PG_urbmod1 }
	#change_variable = { which = float_1 which = PG_urbmod2 }
	if = { 	
		limit = { NOT = { check_variable = { float_1 = 0 } } }		# if modifiers are very bad. 
		set_variable = { which = float_1 value = 0 } 
	}			
	multiply_variable = { which = PG_urbancap which = float_1 }
	
	change_variable = { which = PG_urbancap which = PG_urbcap1 }
	
	set_variable = { which = float_1 value = 1 }
	change_variable = { which = float_1 which = PG_urbstab }
	multiply_variable = { which = PG_urbancap which = float_1 }
	
	set_variable = { which = float_1 value = 1 }
	change_variable = { which = float_1 which = PG_urbdevs }
	multiply_variable = { which = PG_urbancap which = float_1 }
	
}


PG_uppcap_formula = {
	export_to_variable = { which = PG_upp_upp value = modifier:allowed_num_of_manufactories }
	subtract_variable = { PG_upp_upp = 1 }		# the 1st manufactory, we need to remove it manually. 
}

PG_society_structure = {		# theater is a temporary building, until I add the correct one
	if = { 		limit = { has_building = huge_theater } 	PG_society_calc = { rt = 0.20 rc = 0.60 ru = 0.20 uc = 0.50 up = 0.50 } }
	else_if = { limit = { has_building = great_theater } 	PG_society_calc = { rt = 0.40 rc = 0.45 ru = 0.15 uc = 0.70 up = 0.30 } }
	else_if = { limit = { has_building = big_theater } 		PG_society_calc = { rt = 0.60 rc = 0.30 ru = 0.10 uc = 0.80 up = 0.20 } }
	else_if = { limit = { has_building = small_theater } 	PG_society_calc = { rt = 0.80 rc = 0.10 ru = 0.10 uc = 0.85 up = 0.15 } }
	else = { 												PG_society_calc = { rt = 1.00 rc = 0.00 ru = 0.00 uc = 0.90 up = 0.10 } }
	
}

PG_society_temporal = {			# This is active until the new buildings are accepted and added to the game. 
	if = { 		
		limit = { OR = { engineering_architecture_institution = 100 astronomy_institution = 100 } }
		PG_society_calc = { rt = 0.20 rc = 0.60 ru = 0.20 uc = 0.50 up = 0.50 } 
	}
	else_if = { 
		limit = { OR = { blast_furnace_institution = 100 axiomatic_maths_institution = 100 } }
		PG_society_calc = { rt = 0.40 rc = 0.45 ru = 0.15 uc = 0.70 up = 0.30 } 
	}
	else_if = { 
		limit = { OR = { cast_iron_institution = 100 bureaucracy_institution = 100 } }
		PG_society_calc = { rt = 0.60 rc = 0.30 ru = 0.10 uc = 0.80 up = 0.20 }
	}
	else_if = { 
		limit = { OR = { coin_usage = 100 siege_engineering_institution = 100 is_capital = yes } }	# added capital, to buff OPMs
		PG_society_calc = { rt = 0.80 rc = 0.10 ru = 0.10 uc = 0.85 up = 0.15 } 
	}
	else = { 
		PG_society_calc = { rt = 1.00 rc = 0.00 ru = 0.00 uc = 0.90 up = 0.10 } 
	}
	



}

PG_society_calc = {
	set_variable = { which = PG_rur_trb which = PG_ruralcap } multiply_variable = { PG_rur_trb = $rt$ }
	set_variable = { which = PG_rur_com which = PG_ruralcap } multiply_variable = { PG_rur_com = $rc$ }
	set_variable = { which = PG_rur_upp which = PG_ruralcap } multiply_variable = { PG_rur_upp = $ru$ }
	
	set_variable = { which = PG_urb_com which = PG_urbancap } multiply_variable = { PG_urb_com = $uc$ }
	set_variable = { which = PG_urb_upp which = PG_urbancap } multiply_variable = { PG_urb_upp = $up$ }
}


PG_capacity_calc = {
	set_variable = { which = PG_trb_cap which = PG_rur_trb }
	
	set_variable = { which = PG_com_cap which = PG_rur_com }
	change_variable = { which = PG_com_cap which = PG_urb_com }
	
	set_variable = { which = PG_upp_cap which = PG_rur_upp }
	change_variable = { which = PG_upp_cap which = PG_urb_upp }
	change_variable = { which = PG_upp_cap which = PG_upp_upp }
	
	# Reset the variables with current population
	export_to_variable = { which = PG_trb_now value = base_manpower }
	export_to_variable = { which = PG_com_now value = base_production }
	export_to_variable = { which = PG_upp_now value = base_tax }
	
	# Legacy: create growth at provincial level
	# avoid zero values
	if = { limit = { NOT = { check_variable = { PG_trb_now = 1 } } } set_variable = { which = PG_trb_now value = 0.2 } }
	if = { limit = { NOT = { check_variable = { PG_com_now = 1 } } } set_variable = { which = PG_com_now value = 0.2 } }
	if = { limit = { NOT = { check_variable = { PG_upp_now = 1 } } } set_variable = { which = PG_upp_now value = 0.2 } }

	set_variable = { which = PG_trb_grow which = PG_trb_cap } 		 divide_variable = { which = PG_trb_grow which = PG_trb_now }
	set_variable = { which = PG_com_grow which = PG_com_cap } 		 divide_variable = { which = PG_com_grow which = PG_com_now }
	set_variable = { which = PG_upp_grow which = PG_upp_cap } 		 divide_variable = { which = PG_upp_grow which = PG_upp_now }

	if = { limit = { NOT = { check_variable = { PG_trb_now = 1 } } } set_variable = { which = PG_trb_now value = 0 } }	# reset
	if = { limit = { NOT = { check_variable = { PG_com_now = 1 } } } set_variable = { which = PG_com_now value = 0 } }	# reset
	if = { limit = { NOT = { check_variable = { PG_upp_now = 1 } } } set_variable = { which = PG_upp_now value = 0 } }	# reset

	# Show expected variation -> target to fill
	set_variable = { which = PG_trb_var which = PG_trb_cap }
	subtract_variable = { which = PG_trb_var which = PG_trb_now }
	multiply_variable = { PG_trb_var = 0.001 } multiply_variable = { PG_trb_var = 1000 } # round to units
	
	set_variable = { which = PG_com_var which = PG_com_cap }
	subtract_variable = { which = PG_com_var which = PG_com_now }
	multiply_variable = { PG_com_var = 0.001 } multiply_variable = { PG_com_var = 1000 } # round to units
	
	set_variable = { which = PG_upp_var which = PG_upp_cap }
	subtract_variable = { which = PG_upp_var which = PG_upp_now }
	multiply_variable = { PG_upp_var = 0.001 } multiply_variable = { PG_upp_var = 1000 } # round to units
	
	# Totals
	set_variable = { which = PG_tot_cap which = PG_trb_cap } 	set_variable = { which = PG_tot_now which = PG_trb_now } 	
	change_variable = { which = PG_tot_cap which = PG_com_cap } change_variable = { which = PG_tot_now which = PG_com_now }
	change_variable = { which = PG_tot_cap which = PG_upp_cap } change_variable = { which = PG_tot_now which = PG_upp_now }
	
	# Round capacities to decimals (xx,x)
	multiply_variable = { PG_tot_cap = 0.01 } multiply_variable = { PG_tot_cap = 100 }
	multiply_variable = { PG_trb_cap = 0.01 } multiply_variable = { PG_trb_cap = 100 }
	multiply_variable = { PG_com_cap = 0.01 } multiply_variable = { PG_com_cap = 100 }
	multiply_variable = { PG_upp_cap = 0.01 } multiply_variable = { PG_upp_cap = 100 }
	multiply_variable = { PG_trb_grow = 0.1 } multiply_variable = { PG_trb_grow = 1000 }	# includes x100, to be percentages
	multiply_variable = { PG_com_grow = 0.1 } multiply_variable = { PG_com_grow = 1000 }
	multiply_variable = { PG_upp_grow = 0.1 } multiply_variable = { PG_upp_grow = 1000 }
	
}


##
# AREA BELOW IS PENDING TO BE IN THE MOD. ALL EXPERIMENTAL
##


PG_area_growth_calc = {
	# Remember: scope MUST BE the Area capital, the province with flag "PG_area_cap_flag", given at the game startup. 
	set_variable = { which = float_1 which = PG_trb_cap }
	set_variable = { which = float_2 which = PG_com_cap }
	set_variable = { which = float_3 which = PG_upp_cap }
	
	area = {							# scope = ALL provinces within this area other than the area capital
		limit = { NOT = { has_province_flag = PG_area_cap_flag } }
		PREV = {
			change_variable = { which = PG_trb_cap which = PREV } change_variable = { which = PG_trb_now which = PREV }
			change_variable = { which = PG_com_cap which = PREV } change_variable = { which = PG_com_now which = PREV }
			change_variable = { which = PG_upp_cap which = PREV } change_variable = { which = PG_upp_now which = PREV }
		}
	}
	# Now all is stored in the area capital. Move it to a separate variable, and restore province values. 

	set_variable = { which = PG_trb_areacap which = PG_trb_cap }
	set_variable = { which = PG_com_areacap which = PG_com_cap }
	set_variable = { which = PG_upp_areacap which = PG_upp_cap }
	
	set_variable = { which = PG_trb_areanow which = PG_trb_now }
	set_variable = { which = PG_com_areanow which = PG_com_now }
	set_variable = { which = PG_upp_areanow which = PG_upp_now }
	
	# restore
	set_variable = { which = PG_trb_cap which = float_1 }
	set_variable = { which = PG_com_cap which = float_2 }
	set_variable = { which = PG_upp_cap which = float_3 }
	
	export_to_variable = { which = PG_trb_now value = base_manpower }
	export_to_variable = { which = PG_com_now value = base_production }
	export_to_variable = { which = PG_upp_now value = base_tax }


	# Growth formulas. Includes checks if zero, because it has a divide formula. 
	if = { limit = { NOT = { check_variable = { PG_trb_now = 1 } } } set_variable = { which = PG_trb_now value = 0.2 } }
	if = { limit = { NOT = { check_variable = { PG_com_now = 1 } } } set_variable = { which = PG_com_now value = 0.2 } }
	if = { limit = { NOT = { check_variable = { PG_upp_now = 1 } } } set_variable = { which = PG_upp_now value = 0.2 } }
	
	set_variable = { which = PG_trb_grow which = PG_trb_areacap } divide_variable = { which = PG_trb_grow which = PG_trb_areanow }
	set_variable = { which = PG_com_grow which = PG_com_areacap } divide_variable = { which = PG_com_grow which = PG_com_areanow }
	set_variable = { which = PG_upp_grow which = PG_upp_areacap } divide_variable = { which = PG_upp_grow which = PG_upp_areanow }
	
	if = { limit = { NOT = { check_variable = { PG_trb_now = 1 } } } set_variable = { which = PG_trb_now value = 0 } }	# reset
	if = { limit = { NOT = { check_variable = { PG_com_now = 1 } } } set_variable = { which = PG_com_now value = 0 } }	# reset
	if = { limit = { NOT = { check_variable = { PG_upp_now = 1 } } } set_variable = { which = PG_upp_now value = 0 } }	# reset
	
	# Add growth value to other provinces in the area
	area = {							# scope = ALL provinces within this area other than the area capital
		limit = { NOT = { has_province_flag = PG_area_cap_flag } }
		set_variable = { which = PG_trb_grow which = PREV }
		set_variable = { which = PG_com_grow which = PREV }
		set_variable = { which = PG_upp_grow which = PREV }
	}
}

PG_area_vars_aggregate = {
	# Now let's count which "jobs" are available. Remember to do this once capacities are updated (and variations updated)
	
	# Scope: must be the province that is area capital. Identified with province flag "PG_area_cap_flag"
	
	# Cleanup of previous values
	set_variable = { which = PG_trb_1up value = 0 }		set_variable = { which = PG_trb_1down value = 0 }	
	set_variable = { which = PG_trb_2up value = 0 }		set_variable = { which = PG_trb_2down value = 0 }	
	set_variable = { which = PG_trb_3up value = 0 }		set_variable = { which = PG_trb_3down value = 0 }	
	
	set_variable = { which = PG_com_1up value = 0 }		set_variable = { which = PG_com_1down value = 0 }	
	set_variable = { which = PG_com_2up value = 0 }		set_variable = { which = PG_com_2down value = 0 }	
	set_variable = { which = PG_com_3up value = 0 }		set_variable = { which = PG_com_3down value = 0 }	
	
	set_variable = { which = PG_upp_1up value = 0 }		set_variable = { which = PG_upp_1down value = 0 }	
	set_variable = { which = PG_upp_2up value = 0 }		set_variable = { which = PG_upp_2down value = 0 }	
	set_variable = { which = PG_upp_3up value = 0 }		set_variable = { which = PG_upp_3down value = 0 }	
	
	PG_get_variations_stats_own = yes
	
	
	area = {							# scope = ALL provinces within this area other than the area capital
		limit = { NOT = { has_province_flag = PG_area_cap_flag } }
		PG_get_variations_stats_prev = yes
		
	}
	
	set_variable = { which = PG_trb_uptotal which = PG_trb_1up } 		set_variable = { which = PG_trb_downtotal which = PG_trb_1down }
	change_variable = { which = PG_trb_uptotal which = PG_trb_2up } 	change_variable = { which = PG_trb_downtotal which = PG_trb_2down }
	change_variable = { which = PG_trb_uptotal which = PG_trb_3up } 	change_variable = { which = PG_trb_downtotal which = PG_trb_3down }
	
	set_variable = { which = PG_com_uptotal which = PG_com_1up } 		set_variable = { which = PG_com_downtotal which = PG_com_1down }
	change_variable = { which = PG_com_uptotal which = PG_com_2up } 	change_variable = { which = PG_com_downtotal which = PG_com_2down }
	change_variable = { which = PG_com_uptotal which = PG_com_3up } 	change_variable = { which = PG_com_downtotal which = PG_com_3down }
	
	set_variable = { which = PG_upp_uptotal which = PG_upp_1up } 		set_variable = { which = PG_upp_downtotal which = PG_upp_1down }
	change_variable = { which = PG_upp_uptotal which = PG_upp_2up } 	change_variable = { which = PG_upp_downtotal which = PG_upp_2down }
	change_variable = { which = PG_upp_uptotal which = PG_upp_3up } 	change_variable = { which = PG_upp_downtotal which = PG_upp_3down }
	
}

PG_get_variations_stats_own = {
	# Converts the size into a variable that counts "how many provinces has growth of +1"
	
	if = { 		limit = { check_variable = { PG_trb_var = 3 } } 			change_variable = { PG_trb_3up = 1 } }
	else_if = { limit = { check_variable = { PG_trb_var = 2 } } 			change_variable = { PG_trb_2up = 1 } }
	else_if = { limit = { check_variable = { PG_trb_var = 1 } } 			change_variable = { PG_trb_1up = 1 } }
	
	if = { 		limit = { NOT = { check_variable = { PG_trb_var = -2.9 } } }	change_variable = { PG_trb_3down = 1 } }
	else_if = { limit = { NOT = { check_variable = { PG_trb_var = -1.9 } } }	change_variable = { PG_trb_2down = 1 } }
	else_if = { limit = { NOT = { check_variable = { PG_trb_var = -0.9 } } }	change_variable = { PG_trb_1down = 1 } }
	
	if = { 		limit = { check_variable = { PG_com_var = 3 } } 			change_variable = { PG_com_3up = 1 } }
	else_if = { limit = { check_variable = { PG_com_var = 2 } } 			change_variable = { PG_com_2up = 1 } }
	else_if = { limit = { check_variable = { PG_com_var = 1 } } 			change_variable = { PG_com_1up = 1 } }
	
	if = { 		limit = { NOT = { check_variable = { PG_com_var = -2.9 } } }	change_variable = { PG_com_3down = 1 } }
	else_if = { limit = { NOT = { check_variable = { PG_com_var = -1.9 } } }	change_variable = { PG_com_2down = 1 } }
	else_if = { limit = { NOT = { check_variable = { PG_com_var = -0.9 } } }	change_variable = { PG_com_1down = 1 } }
	
	if = { 		limit = { check_variable = { PG_upp_var = 3 } } 			change_variable = { PG_upp_3up = 1 } }
	else_if = { limit = { check_variable = { PG_upp_var = 2 } } 			change_variable = { PG_upp_2up = 1 } }
	else_if = { limit = { check_variable = { PG_upp_var = 1 } } 			change_variable = { PG_upp_1up = 1 } }
	
	if = { 		limit = { NOT = { check_variable = { PG_upp_var = -2.9 } } }	change_variable = { PG_upp_3down = 1 } }
	else_if = { limit = { NOT = { check_variable = { PG_upp_var = -1.9 } } }	change_variable = { PG_upp_2down = 1 } }
	else_if = { limit = { NOT = { check_variable = { PG_upp_var = -0.9 } } }	change_variable = { PG_upp_1down = 1 } }
	
}

PG_get_variations_stats_prev = {

	if = { 		limit = { check_variable = { PG_trb_var = 3 } } 				PREV = { change_variable = { PG_trb_3up = 1 } } }
	else_if = { limit = { check_variable = { PG_trb_var = 2 } } 				PREV = { change_variable = { PG_trb_2up = 1 } } }
	else_if = { limit = { check_variable = { PG_trb_var = 1 } } 				PREV = { change_variable = { PG_trb_1up = 1 } } }
	
	if = { 		limit = { NOT = { check_variable = { PG_trb_var = -2.9 } } }	PREV = { change_variable = { PG_trb_3down = 1 } } }
	else_if = { limit = { NOT = { check_variable = { PG_trb_var = -1.9 } } }	PREV = { change_variable = { PG_trb_2down = 1 } } }
	else_if = { limit = { NOT = { check_variable = { PG_trb_var = -0.9 } } }	PREV = { change_variable = { PG_trb_1down = 1 } } }
	
	if = { 		limit = { check_variable = { PG_com_var = 3 } } 				PREV = { change_variable = { PG_com_3up = 1 } } }
	else_if = { limit = { check_variable = { PG_com_var = 2 } } 				PREV = { change_variable = { PG_com_2up = 1 } } }
	else_if = { limit = { check_variable = { PG_com_var = 1 } } 				PREV = { change_variable = { PG_com_1up = 1 } } }
	
	if = { 		limit = { NOT = { check_variable = { PG_com_var = -2.9 } } }	PREV = { change_variable = { PG_com_3down = 1 } } }
	else_if = { limit = { NOT = { check_variable = { PG_com_var = -1.9 } } }	PREV = { change_variable = { PG_com_2down = 1 } } }
	else_if = { limit = { NOT = { check_variable = { PG_com_var = -0.9 } } }	PREV = { change_variable = { PG_com_1down = 1 } } }
	
	if = { 		limit = { check_variable = { PG_upp_var = 3 } } 				PREV = { change_variable = { PG_upp_3up = 1 } } }
	else_if = { limit = { check_variable = { PG_upp_var = 2 } } 				PREV = { change_variable = { PG_upp_2up = 1 } } }
	else_if = { limit = { check_variable = { PG_upp_var = 1 } } 				PREV = { change_variable = { PG_upp_1up = 1 } } }
	
	if = { 		limit = { NOT = { check_variable = { PG_upp_var = -2.9 } } }	PREV = { change_variable = { PG_upp_3down = 1 } } }
	else_if = { limit = { NOT = { check_variable = { PG_upp_var = -1.9 } } }	PREV = { change_variable = { PG_upp_2down = 1 } } }
	else_if = { limit = { NOT = { check_variable = { PG_upp_var = -0.9 } } }	PREV = { change_variable = { PG_upp_1down = 1 } } }
	
}
